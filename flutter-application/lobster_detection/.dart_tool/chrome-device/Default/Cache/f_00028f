define(['dart_sdk', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/characters/src/extensions.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/services/raw_keyboard_windows.dart', 'packages/flutter/src/services/keyboard_key.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/services/clipboard.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/multitap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/painting/strut_style.dart'], (function load__packages__flutter__src__rendering__editable_dart(dart_sdk, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__characters__src__extensions$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__services__raw_keyboard_windows$46dart, packages__flutter__src__services__keyboard_key$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__services__clipboard$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__multitap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__painting__strut_style$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const inline_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__inline_span;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const extensions = packages__characters__src__extensions$46dart.src__extensions;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const raw_keyboard = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard;
  const raw_keyboard_macos = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard_macos;
  const keyboard_key = packages__flutter__src__services__keyboard_key$46dart.src__services__keyboard_key;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const clipboard = packages__flutter__src__services__clipboard$46dart.src__services__clipboard;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const multitap = packages__flutter__src__gestures__multitap$46dart.src__gestures__multitap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  var editable = Object.create(dart.library);
  var $length = dartx.length;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $codeUnitAt = dartx.codeUnitAt;
  var $first = dartx.first;
  var $toString = dartx.toString;
  var $substring = dartx.substring;
  var $any = dartx.any;
  var $times = dartx['*'];
  var $isEmpty = dartx.isEmpty;
  var $skip = dartx.skip;
  var $floorToDouble = dartx.floorToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $runtimeType = dartx.runtimeType;
  var $last = dartx.last;
  var $fold = dartx.fold;
  var $isFinite = dartx.isFinite;
  var $round = dartx.round;
  var $_get = dartx._get;
  var $clamp = dartx.clamp;
  var $iterator = dartx.iterator;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ValueNotifierOfbool: () => (T.ValueNotifierOfbool = dart.constFn(change_notifier.ValueNotifier$(core.bool)))(),
    JSArrayOfRenderEditablePainter: () => (T.JSArrayOfRenderEditablePainter = dart.constFn(_interceptors.JSArray$(editable.RenderEditablePainter)))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidToTextSelection: () => (T.VoidToTextSelection = dart.constFn(dart.fnType(text_editing.TextSelection, [])))(),
    TextSelectionTodynamic: () => (T.TextSelectionTodynamic = dart.constFn(dart.fnType(dart.dynamic, [text_editing.TextSelection])))(),
    TextSpanN: () => (T.TextSpanN = dart.constFn(dart.nullable(text_span.TextSpan)))(),
    InlineSpanSemanticsInformationTobool: () => (T.InlineSpanSemanticsInformationTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpanSemanticsInformation])))(),
    JSArrayOfSemanticsNode: () => (T.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics.SemanticsNode)))(),
    ListQueueOfSemanticsNode: () => (T.ListQueueOfSemanticsNode = dart.constFn(collection.ListQueue$(semantics.SemanticsNode)))(),
    JSArrayOfTextBox: () => (T.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    JSArrayOfTextSelectionPoint: () => (T.JSArrayOfTextSelectionPoint = dart.constFn(_interceptors.JSArray$(editable.TextSelectionPoint)))(),
    RectN: () => (T.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    RectNAndTextBoxToRect: () => (T.RectNAndTextBoxToRect = dart.constFn(dart.fnType(ui.Rect, [T.RectN(), ui.TextBox])))(),
    DiagnosticsPropertyOfValueNotifierOfbool: () => (T.DiagnosticsPropertyOfValueNotifierOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(T.ValueNotifierOfbool())))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    DiagnosticsPropertyOfLocale: () => (T.DiagnosticsPropertyOfLocale = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Locale)))(),
    DiagnosticsPropertyOfTextSelection: () => (T.DiagnosticsPropertyOfTextSelection = dart.constFn(diagnostics.DiagnosticsProperty$(text_editing.TextSelection)))(),
    DiagnosticsPropertyOfViewportOffset: () => (T.DiagnosticsPropertyOfViewportOffset = dart.constFn(diagnostics.DiagnosticsProperty$(viewport_offset.ViewportOffset)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    LinkedHashSetOfLogicalKeyboardKey: () => (T.LinkedHashSetOfLogicalKeyboardKey = dart.constFn(collection.LinkedHashSet$(keyboard_key.LogicalKeyboardKey)))(),
    RenderEditableN: () => (T.RenderEditableN = dart.constFn(dart.nullable(editable.RenderEditable)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.start",
        index: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_name$]: "TextWidthBasis.parent",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [TextRange_end]: 0,
        [TextRange_start]: 0,
        [TextSelection_isDirectional]: false,
        [TextSelection_affinity]: C[10] || CT.C10,
        [TextSelection_extentOffset]: 0,
        [TextSelection_baseOffset]: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$0]: "Axis.horizontal",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$0]: "Axis.vertical",
        index: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.android",
        index: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_name$1]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 1,
        [EdgeInsets_right]: 0.5,
        [EdgeInsets_top]: 1,
        [EdgeInsets_left]: 0.5
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 1,
        [Radius_x]: 1
      });
    }
  }, false);
  var C = Array(21).fill(void 0);
  var I = [
    "file:///C:/dev/flutter/packages/flutter/lib/src/rendering/editable.dart",
    "package:flutter/src/rendering/editable.dart"
  ];
  var point$ = dart.privateName(editable, "TextSelectionPoint.point");
  var direction$ = dart.privateName(editable, "TextSelectionPoint.direction");
  var _name = dart.privateName(ui, "_name");
  editable.TextSelectionPoint = class TextSelectionPoint extends core.Object {
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    toString() {
      switch (this.direction) {
        case C[0] || CT.C0:
        {
          return dart.str(this.point) + "-ltr";
        }
        case C[1] || CT.C1:
        {
          return dart.str(this.point) + "-rtl";
        }
        case null:
        {
          return dart.str(this.point);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (editable.TextSelectionPoint.new = function(point, direction) {
    if (point == null) dart.nullFailed(I[0], 55, 33, "point");
    this[point$] = point;
    this[direction$] = direction;
    if (!(point != null)) dart.assertFailed(null, I[0], 56, 14, "point != null");
    ;
  }).prototype = editable.TextSelectionPoint.prototype;
  dart.addTypeTests(editable.TextSelectionPoint);
  dart.addTypeCaches(editable.TextSelectionPoint);
  dart.setLibraryUri(editable.TextSelectionPoint, I[1]);
  dart.setFieldSignature(editable.TextSelectionPoint, () => ({
    __proto__: dart.getFields(editable.TextSelectionPoint.__proto__),
    point: dart.finalFieldType(ui.Offset),
    direction: dart.finalFieldType(dart.nullable(ui.TextDirection))
  }));
  dart.defineExtensionMethods(editable.TextSelectionPoint, ['toString']);
  var onSelectionChanged$ = dart.privateName(editable, "RenderEditable.onSelectionChanged");
  var onCaretChanged$ = dart.privateName(editable, "RenderEditable.onCaretChanged");
  var ignorePointer$ = dart.privateName(editable, "RenderEditable.ignorePointer");
  var textSelectionDelegate$ = dart.privateName(editable, "RenderEditable.textSelectionDelegate");
  var floatingCursorAddedMargin$ = dart.privateName(editable, "RenderEditable.floatingCursorAddedMargin");
  var _name$ = dart.privateName(text_painter, "_name");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _foregroundRenderObject = dart.privateName(editable, "_foregroundRenderObject");
  var _backgroundRenderObject = dart.privateName(editable, "_backgroundRenderObject");
  var _foregroundPainter = dart.privateName(editable, "_foregroundPainter");
  var _painter = dart.privateName(editable, "_painter");
  var __RenderEditable__caretPainter = dart.privateName(editable, "_#RenderEditable#_caretPainter");
  var __RenderEditable__caretPainter_isSet = dart.privateName(editable, "_#RenderEditable#_caretPainter#isSet");
  var _selectionPainter = dart.privateName(editable, "_selectionPainter");
  var _autocorrectHighlightPainter = dart.privateName(editable, "_autocorrectHighlightPainter");
  var _cachedBuiltInForegroundPainters = dart.privateName(editable, "_cachedBuiltInForegroundPainters");
  var _cachedBuiltInPainters = dart.privateName(editable, "_cachedBuiltInPainters");
  var _textLayoutLastMaxWidth = dart.privateName(editable, "_textLayoutLastMaxWidth");
  var _textLayoutLastMinWidth = dart.privateName(editable, "_textLayoutLastMinWidth");
  var _lastCaretRect = dart.privateName(editable, "_lastCaretRect");
  var _selectionStartInViewport = dart.privateName(editable, "_selectionStartInViewport");
  var _selectionEndInViewport = dart.privateName(editable, "_selectionEndInViewport");
  var _cursorResetLocation = dart.privateName(editable, "_cursorResetLocation");
  var _wasSelectingVerticallyWithKeyboard = dart.privateName(editable, "_wasSelectingVerticallyWithKeyboard");
  var _cachedPlainText = dart.privateName(editable, "_cachedPlainText");
  var _hasFocus = dart.privateName(editable, "_hasFocus");
  var _listenerAttached = dart.privateName(editable, "_listenerAttached");
  var _forceLine = dart.privateName(editable, "_forceLine");
  var _readOnly = dart.privateName(editable, "_readOnly");
  var _cursorWidth = dart.privateName(editable, "_cursorWidth");
  var _floatingCursorOn = dart.privateName(editable, "_floatingCursorOn");
  var __RenderEditable__floatingCursorTextPosition = dart.privateName(editable, "_#RenderEditable#_floatingCursorTextPosition");
  var __RenderEditable__floatingCursorTextPosition_isSet = dart.privateName(editable, "_#RenderEditable#_floatingCursorTextPosition#isSet");
  var _maxScrollExtent = dart.privateName(editable, "_maxScrollExtent");
  var _clipBehavior = dart.privateName(editable, "_clipBehavior");
  var _semanticsInfo = dart.privateName(editable, "_semanticsInfo");
  var _cachedChildNodes = dart.privateName(editable, "_cachedChildNodes");
  var __RenderEditable__tap = dart.privateName(editable, "_#RenderEditable#_tap");
  var __RenderEditable__tap_isSet = dart.privateName(editable, "_#RenderEditable#_tap#isSet");
  var __RenderEditable__longPress = dart.privateName(editable, "_#RenderEditable#_longPress");
  var __RenderEditable__longPress_isSet = dart.privateName(editable, "_#RenderEditable#_longPress#isSet");
  var _lastTapDownPosition = dart.privateName(editable, "_lastTapDownPosition");
  var _lastSecondaryTapDownPosition = dart.privateName(editable, "_lastSecondaryTapDownPosition");
  var __RenderEditable__caretPrototype = dart.privateName(editable, "_#RenderEditable#_caretPrototype");
  var __RenderEditable__caretPrototype_isSet = dart.privateName(editable, "_#RenderEditable#_caretPrototype#isSet");
  var _relativeOrigin = dart.privateName(editable, "_relativeOrigin");
  var _previousOffset = dart.privateName(editable, "_previousOffset");
  var _resetOriginOnLeft = dart.privateName(editable, "_resetOriginOnLeft");
  var _resetOriginOnRight = dart.privateName(editable, "_resetOriginOnRight");
  var _resetOriginOnTop = dart.privateName(editable, "_resetOriginOnTop");
  var _resetOriginOnBottom = dart.privateName(editable, "_resetOriginOnBottom");
  var _resetFloatingCursorAnimationValue = dart.privateName(editable, "_resetFloatingCursorAnimationValue");
  var _clipRectLayer = dart.privateName(editable, "_clipRectLayer");
  var _textPainter = dart.privateName(editable, "_textPainter");
  var _showCursor = dart.privateName(editable, "_showCursor");
  var _maxLines = dart.privateName(editable, "_maxLines");
  var _minLines = dart.privateName(editable, "_minLines");
  var _expands = dart.privateName(editable, "_expands");
  var _selection = dart.privateName(editable, "_selection");
  var _offset = dart.privateName(editable, "_offset");
  var _cursorHeight = dart.privateName(editable, "_cursorHeight");
  var _paintCursorOnTop = dart.privateName(editable, "_paintCursorOnTop");
  var _enableInteractiveSelection = dart.privateName(editable, "_enableInteractiveSelection");
  var _devicePixelRatio = dart.privateName(editable, "_devicePixelRatio");
  var _startHandleLayerLink = dart.privateName(editable, "_startHandleLayerLink");
  var _endHandleLayerLink = dart.privateName(editable, "_endHandleLayerLink");
  var _obscuringCharacter = dart.privateName(editable, "_obscuringCharacter");
  var _obscureText = dart.privateName(editable, "_obscureText");
  var _caretPainter = dart.privateName(editable, "_caretPainter");
  var _updateForegroundPainter = dart.privateName(editable, "_updateForegroundPainter");
  var _updatePainter = dart.privateName(editable, "_updatePainter");
  var _builtInForegroundPainters = dart.privateName(editable, "_builtInForegroundPainters");
  var _builtInPainters = dart.privateName(editable, "_builtInPainters");
  var _onCaretChanged = dart.privateName(editable, "_onCaretChanged");
  var _createBuiltInForegroundPainters = dart.privateName(editable, "_createBuiltInForegroundPainters");
  var _createBuiltInPainters = dart.privateName(editable, "_createBuiltInPainters");
  var _caretPrototype = dart.privateName(editable, "_caretPrototype");
  var _updateSelectionExtentsVisibility = dart.privateName(editable, "_updateSelectionExtentsVisibility");
  var _setTextEditingValue = dart.privateName(editable, "_setTextEditingValue");
  var _handleSelectionChange = dart.privateName(editable, "_handleSelectionChange");
  var _setSelection = dart.privateName(editable, "_setSelection");
  var _handleShortcuts = dart.privateName(editable, "_handleShortcuts");
  var _handleDelete = dart.privateName(editable, "_handleDelete");
  var _handleKeyEvent = dart.privateName(editable, "_handleKeyEvent");
  var _plainText = dart.privateName(editable, "_plainText");
  var _extendSelectionToEnd = dart.privateName(editable, "_extendSelectionToEnd");
  var _extendSelectionToStart = dart.privateName(editable, "_extendSelectionToStart");
  var _getTextPositionVertical = dart.privateName(editable, "_getTextPositionVertical");
  var _getTextPositionAbove = dart.privateName(editable, "_getTextPositionAbove");
  var _getTextPositionBelow = dart.privateName(editable, "_getTextPositionBelow");
  var _getLineAtOffset = dart.privateName(editable, "_getLineAtOffset");
  var TextRange_end = dart.privateName(ui, "TextRange.end");
  var TextRange_start = dart.privateName(ui, "TextRange.start");
  var TextSelection_isDirectional = dart.privateName(text_editing, "TextSelection.isDirectional");
  var TextSelection_affinity = dart.privateName(text_editing, "TextSelection.affinity");
  var TextSelection_extentOffset = dart.privateName(text_editing, "TextSelection.extentOffset");
  var TextSelection_baseOffset = dart.privateName(text_editing, "TextSelection.baseOffset");
  var _showHideCursor = dart.privateName(editable, "_showHideCursor");
  var _floatingCursorTextPosition = dart.privateName(editable, "_floatingCursorTextPosition");
  var _caretMargin = dart.privateName(editable, "_caretMargin");
  var _isMultiline = dart.privateName(editable, "_isMultiline");
  var _handleSetSelection = dart.privateName(editable, "_handleSetSelection");
  var _handleSetText = dart.privateName(editable, "_handleSetText");
  var _handleMoveCursorBackwardByWord = dart.privateName(editable, "_handleMoveCursorBackwardByWord");
  var _handleMoveCursorBackwardByCharacter = dart.privateName(editable, "_handleMoveCursorBackwardByCharacter");
  var _handleMoveCursorForwardByWord = dart.privateName(editable, "_handleMoveCursorForwardByWord");
  var _handleMoveCursorForwardByCharacter = dart.privateName(editable, "_handleMoveCursorForwardByCharacter");
  var _getNextWord = dart.privateName(editable, "_getNextWord");
  var _getPreviousWord = dart.privateName(editable, "_getPreviousWord");
  var _onlyWhitespace = dart.privateName(editable, "_onlyWhitespace");
  var _tap = dart.privateName(editable, "_tap");
  var _handleTapDown = dart.privateName(editable, "_handleTapDown");
  var _handleTap = dart.privateName(editable, "_handleTap");
  var _longPress = dart.privateName(editable, "_longPress");
  var _handleLongPress = dart.privateName(editable, "_handleLongPress");
  var _viewportAxis = dart.privateName(editable, "_viewportAxis");
  var _name$0 = dart.privateName(basic_types, "_name");
  var _paintOffset = dart.privateName(editable, "_paintOffset");
  var _viewportExtent = dart.privateName(editable, "_viewportExtent");
  var _getMaxScrollExtent = dart.privateName(editable, "_getMaxScrollExtent");
  var _hasVisualOverflow = dart.privateName(editable, "_hasVisualOverflow");
  var _layoutText = dart.privateName(editable, "_layoutText");
  var _snapToPhysicalPixel = dart.privateName(editable, "_snapToPhysicalPixel");
  var _preferredHeight = dart.privateName(editable, "_preferredHeight");
  var _getWordAtOffset = dart.privateName(editable, "_getWordAtOffset");
  var _name$1 = dart.privateName(platform, "_name");
  var _computeCaretPrototype = dart.privateName(editable, "_computeCaretPrototype");
  var _paintContents = dart.privateName(editable, "_paintContents");
  var _paintHandleLayers = dart.privateName(editable, "_paintHandleLayers");
  const RenderBox_RelayoutWhenSystemFontsChangeMixin$36 = class RenderBox_RelayoutWhenSystemFontsChangeMixin extends box.RenderBox {};
  (RenderBox_RelayoutWhenSystemFontsChangeMixin$36.new = function() {
    RenderBox_RelayoutWhenSystemFontsChangeMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RelayoutWhenSystemFontsChangeMixin$36.prototype;
  dart.applyMixin(RenderBox_RelayoutWhenSystemFontsChangeMixin$36, object.RelayoutWhenSystemFontsChangeMixin);
  editable.RenderEditable = class RenderEditable extends RenderBox_RelayoutWhenSystemFontsChangeMixin$36 {
    get onSelectionChanged() {
      return this[onSelectionChanged$];
    }
    set onSelectionChanged(value) {
      this[onSelectionChanged$] = value;
    }
    get onCaretChanged() {
      return this[onCaretChanged$];
    }
    set onCaretChanged(value) {
      this[onCaretChanged$] = value;
    }
    get ignorePointer() {
      return this[ignorePointer$];
    }
    set ignorePointer(value) {
      this[ignorePointer$] = value;
    }
    get textSelectionDelegate() {
      return this[textSelectionDelegate$];
    }
    set textSelectionDelegate(value) {
      this[textSelectionDelegate$] = value;
    }
    get floatingCursorAddedMargin() {
      return this[floatingCursorAddedMargin$];
    }
    set floatingCursorAddedMargin(value) {
      this[floatingCursorAddedMargin$] = value;
    }
    [_updateForegroundPainter](newPainter) {
      let t0;
      let effectivePainter = newPainter == null ? this[_builtInForegroundPainters] : new editable._CompositeRenderEditablePainter.new({painters: T.JSArrayOfRenderEditablePainter().of([this[_builtInForegroundPainters], newPainter])});
      if (this[_foregroundRenderObject] == null) {
        let foregroundRenderObject = new editable._RenderEditableCustomPaint.new({painter: effectivePainter});
        this.adoptChild(foregroundRenderObject);
        this[_foregroundRenderObject] = foregroundRenderObject;
      } else {
        t0 = this[_foregroundRenderObject];
        t0 == null ? null : t0.painter = effectivePainter;
      }
      this[_foregroundPainter] = newPainter;
    }
    get foregroundPainter() {
      return this[_foregroundPainter];
    }
    set foregroundPainter(newPainter) {
      if (dart.equals(newPainter, this[_foregroundPainter])) return;
      this[_updateForegroundPainter](newPainter);
    }
    [_updatePainter](newPainter) {
      let t0;
      let effectivePainter = newPainter == null ? this[_builtInPainters] : new editable._CompositeRenderEditablePainter.new({painters: T.JSArrayOfRenderEditablePainter().of([this[_builtInPainters], newPainter])});
      if (this[_backgroundRenderObject] == null) {
        let backgroundRenderObject = new editable._RenderEditableCustomPaint.new({painter: effectivePainter});
        this.adoptChild(backgroundRenderObject);
        this[_backgroundRenderObject] = backgroundRenderObject;
      } else {
        t0 = this[_backgroundRenderObject];
        t0 == null ? null : t0.painter = effectivePainter;
      }
      this[_painter] = newPainter;
    }
    get painter() {
      return this[_painter];
    }
    set painter(newPainter) {
      if (dart.equals(newPainter, this[_painter])) return;
      this[_updatePainter](newPainter);
    }
    get [_caretPainter]() {
      let t1;
      if (!dart.test(this[__RenderEditable__caretPainter_isSet])) {
        let t0 = new editable._FloatingCursorPainter.new(dart.bind(this, _onCaretChanged));
        if (dart.test(this[__RenderEditable__caretPainter_isSet])) dart.throw(new _internal.LateError.fieldADI("_caretPainter"));
        this[__RenderEditable__caretPainter] = t0;
        this[__RenderEditable__caretPainter_isSet] = true;
      }
      t1 = this[__RenderEditable__caretPainter];
      return t1;
    }
    get [_builtInForegroundPainters]() {
      let t1;
      t1 = this[_cachedBuiltInForegroundPainters];
      return t1 == null ? this[_cachedBuiltInForegroundPainters] = this[_createBuiltInForegroundPainters]() : t1;
    }
    [_createBuiltInForegroundPainters]() {
      return new editable._CompositeRenderEditablePainter.new({painters: (() => {
          let t1 = T.JSArrayOfRenderEditablePainter().of([]);
          if (dart.test(this.paintCursorAboveText)) t1[$add](this[_caretPainter]);
          return t1;
        })()});
    }
    get [_builtInPainters]() {
      let t2;
      t2 = this[_cachedBuiltInPainters];
      return t2 == null ? this[_cachedBuiltInPainters] = this[_createBuiltInPainters]() : t2;
    }
    [_createBuiltInPainters]() {
      return new editable._CompositeRenderEditablePainter.new({painters: (() => {
          let t2 = T.JSArrayOfRenderEditablePainter().of([this[_autocorrectHighlightPainter], this[_selectionPainter]]);
          if (!dart.test(this.paintCursorAboveText)) t2[$add](this[_caretPainter]);
          return t2;
        })()});
    }
    [_onCaretChanged](caretRect) {
      let t3;
      if (caretRect == null) dart.nullFailed(I[0], 394, 29, "caretRect");
      if (!dart.equals(this[_lastCaretRect], caretRect)) {
        t3 = this.onCaretChanged;
        t3 == null ? null : t3(caretRect);
      }
      this[_lastCaretRect] = this.onCaretChanged == null ? null : caretRect;
    }
    get textHeightBehavior() {
      return this[_textPainter].textHeightBehavior;
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textPainter].textHeightBehavior, value)) return;
      this[_textPainter].textHeightBehavior = value;
      this.markNeedsTextLayout();
    }
    get textWidthBasis() {
      return this[_textPainter].textWidthBasis;
    }
    set textWidthBasis(value) {
      if (value == null) dart.nullFailed(I[0], 424, 37, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 425, 12, "value != null");
      if (this[_textPainter].textWidthBasis == value) return;
      this[_textPainter].textWidthBasis = value;
      this.markNeedsTextLayout();
    }
    get devicePixelRatio() {
      return this[_devicePixelRatio];
    }
    set devicePixelRatio(value) {
      if (value == null) dart.nullFailed(I[0], 437, 31, "value");
      if (this.devicePixelRatio == value) return;
      this[_devicePixelRatio] = value;
      this.markNeedsTextLayout();
    }
    get obscuringCharacter() {
      return this[_obscuringCharacter];
    }
    set obscuringCharacter(value) {
      if (value == null) dart.nullFailed(I[0], 449, 33, "value");
      if (this[_obscuringCharacter] == value) {
        return;
      }
      if (!(value != null && extensions['StringCharacters|get#characters'](value)[$length] === 1)) dart.assertFailed(null, I[0], 453, 12, "value != null && value.characters.length == 1");
      this[_obscuringCharacter] = value;
      this.markNeedsLayout();
    }
    get obscureText() {
      return this[_obscureText];
    }
    set obscureText(value) {
      if (value == null) dart.nullFailed(I[0], 461, 24, "value");
      if (this[_obscureText] == value) return;
      this[_obscureText] = value;
      this.markNeedsSemanticsUpdate();
    }
    get selectionHeightStyle() {
      return this[_selectionPainter].selectionHeightStyle;
    }
    set selectionHeightStyle(value) {
      if (value == null) dart.nullFailed(I[0], 472, 46, "value");
      this[_selectionPainter].selectionHeightStyle = value;
    }
    get selectionWidthStyle() {
      return this[_selectionPainter].selectionWidthStyle;
    }
    set selectionWidthStyle(value) {
      if (value == null) dart.nullFailed(I[0], 480, 44, "value");
      this[_selectionPainter].selectionWidthStyle = value;
    }
    get selectionStartInViewport() {
      return this[_selectionStartInViewport];
    }
    get selectionEndInViewport() {
      return this[_selectionEndInViewport];
    }
    [_updateSelectionExtentsVisibility](effectiveOffset) {
      if (effectiveOffset == null) dart.nullFailed(I[0], 518, 49, "effectiveOffset");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 519, 12, "selection != null");
      let visibleRegion = ui.Offset.zero['&'](this.size);
      let startOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: dart.nullCheck(this.selection).start, affinity: dart.nullCheck(this.selection).affinity}), this[_caretPrototype]);
      this[_selectionStartInViewport].value = visibleRegion.inflate(0.5).contains(startOffset['+'](effectiveOffset));
      let endOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: dart.nullCheck(this.selection).end, affinity: dart.nullCheck(this.selection).affinity}), this[_caretPrototype]);
      this[_selectionEndInViewport].value = visibleRegion.inflate(0.5).contains(endOffset['+'](effectiveOffset));
    }
    [_setTextEditingValue](newValue, cause) {
      if (newValue == null) dart.nullFailed(I[0], 561, 46, "newValue");
      if (cause == null) dart.nullFailed(I[0], 561, 78, "cause");
      this.textSelectionDelegate.textEditingValue = newValue;
      this.textSelectionDelegate.userUpdateTextEditingValue(newValue, cause);
    }
    [_setSelection](nextSelection, cause) {
      if (nextSelection == null) dart.nullFailed(I[0], 566, 36, "nextSelection");
      if (cause == null) dart.nullFailed(I[0], 566, 73, "cause");
      if (dart.test(nextSelection.isValid)) {
        let textLength = this.textSelectionDelegate.textEditingValue.text.length;
        nextSelection = nextSelection.copyWith({baseOffset: math.min(core.int, nextSelection.baseOffset, textLength), extentOffset: math.min(core.int, nextSelection.extentOffset, textLength)});
      }
      this[_handleSelectionChange](nextSelection, cause);
      this[_setTextEditingValue](this.textSelectionDelegate.textEditingValue.copyWith({selection: nextSelection}), cause);
    }
    [_handleSelectionChange](nextSelection, cause) {
      let t3;
      if (nextSelection == null) dart.nullFailed(I[0], 590, 19, "nextSelection");
      if (cause == null) dart.nullFailed(I[0], 591, 27, "cause");
      let focusingEmpty = nextSelection.baseOffset === 0 && nextSelection.extentOffset === 0 && !dart.test(this.hasFocus);
      if (dart.equals(nextSelection, this.selection) && cause != text_input.SelectionChangedCause.keyboard && !focusingEmpty) {
        return;
      }
      t3 = this.onSelectionChanged;
      t3 == null ? null : t3(nextSelection, this, cause);
    }
    [_handleKeyEvent](keyEvent) {
      if (keyEvent == null) dart.nullFailed(I[0], 643, 36, "keyEvent");
      if (true) {
        return;
      }
      if (!raw_keyboard.RawKeyDownEvent.is(keyEvent)) return;
      let keysPressed = keyboard_key.LogicalKeyboardKey.collapseSynonyms(raw_keyboard.RawKeyboard.instance.keysPressed);
      let key = keyEvent.logicalKey;
      let isMacOS = raw_keyboard_macos.RawKeyEventDataMacOs.is(keyEvent.data);
      if (!dart.test(editable.RenderEditable._nonModifierKeys.contains(key)) || dart.notNull(keysPressed.difference(isMacOS ? editable.RenderEditable._macOsModifierKeys : editable.RenderEditable._modifierKeys)[$length]) > 1 || dart.test(keysPressed.difference(editable.RenderEditable._interestingKeys)[$isNotEmpty])) {
        return;
      }
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 666, 12, "selection != null");
      let isShortcutModifierPressed = isMacOS ? keyEvent.isMetaPressed : keyEvent.isControlPressed;
      if (dart.test(isShortcutModifierPressed) && dart.test(editable.RenderEditable._shortcutKeys.contains(key))) {
        this[_handleShortcuts](key);
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.delete)) {
        this[_handleDelete]({forward: true});
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.backspace)) {
        this[_handleDelete]({forward: false});
      }
    }
    static nextCharacter(index, string, includeWhitespace = true) {
      if (index == null) dart.nullFailed(I[0], 692, 32, "index");
      if (string == null) dart.nullFailed(I[0], 692, 46, "string");
      if (includeWhitespace == null) dart.nullFailed(I[0], 692, 60, "includeWhitespace");
      if (!(dart.notNull(index) >= 0 && dart.notNull(index) <= string.length)) dart.assertFailed(null, I[0], 693, 12, "index >= 0 && index <= string.length");
      if (index === string.length) {
        return string.length;
      }
      let count = 0;
      let remaining = extensions['StringCharacters|get#characters'](string).skipWhile(dart.fn(currentString => {
        if (currentString == null) dart.nullFailed(I[0], 699, 70, "currentString");
        if (count <= dart.notNull(index)) {
          count = count + currentString.length;
          return true;
        }
        if (dart.test(includeWhitespace)) {
          return false;
        }
        return editable._isWhitespace(currentString[$codeUnitAt](0));
      }, T.StringTobool()));
      return string.length - dart.toString(remaining).length;
    }
    static previousCharacter(index, string, includeWhitespace = true) {
      let t3;
      if (index == null) dart.nullFailed(I[0], 724, 36, "index");
      if (string == null) dart.nullFailed(I[0], 724, 50, "string");
      if (includeWhitespace == null) dart.nullFailed(I[0], 724, 64, "includeWhitespace");
      if (!(dart.notNull(index) >= 0 && dart.notNull(index) <= string.length)) dart.assertFailed(null, I[0], 725, 12, "index >= 0 && index <= string.length");
      if (index === 0) {
        return 0;
      }
      let count = 0;
      let lastNonWhitespace = null;
      for (let currentString of extensions['StringCharacters|get#characters'](string)) {
        if (!dart.test(includeWhitespace) && !dart.test(editable._isWhitespace(dart.toString(extensions['StringCharacters|get#characters'](currentString)[$first])[$codeUnitAt](0)))) {
          lastNonWhitespace = count;
        }
        if (count + currentString.length >= dart.notNull(index)) {
          return dart.test(includeWhitespace) ? count : (t3 = lastNonWhitespace, t3 == null ? 0 : t3);
        }
        count = count + currentString.length;
      }
      return 0;
    }
    static _moveGivenSelectionLeft(selection, text) {
      if (selection == null) dart.nullFailed(I[0], 748, 62, "selection");
      if (text == null) dart.nullFailed(I[0], 748, 80, "text");
      if (dart.test(selection.isCollapsed) && dart.notNull(selection.extentOffset) <= 0) {
        return selection;
      }
      let previousExtent = null;
      if (selection.start != selection.end) {
        previousExtent = selection.start;
      } else {
        previousExtent = editable.RenderEditable.previousCharacter(selection.extentOffset, text);
      }
      let newSelection = selection.copyWith({extentOffset: previousExtent});
      let newOffset = newSelection.extentOffset;
      return new text_editing.TextSelection.fromPosition(new ui.TextPosition.new({offset: newOffset}));
    }
    static _moveGivenSelectionRight(selection, text) {
      if (selection == null) dart.nullFailed(I[0], 771, 63, "selection");
      if (text == null) dart.nullFailed(I[0], 771, 81, "text");
      if (dart.test(selection.isCollapsed) && dart.notNull(selection.extentOffset) >= text.length) {
        return selection;
      }
      let nextExtent = null;
      if (selection.start != selection.end) {
        nextExtent = selection.end;
      } else {
        nextExtent = editable.RenderEditable.nextCharacter(selection.extentOffset, text);
      }
      let nextSelection = selection.copyWith({extentOffset: nextExtent});
      let newOffset = nextSelection.extentOffset;
      newOffset = dart.notNull(nextSelection.baseOffset) > dart.notNull(nextSelection.extentOffset) ? nextSelection.baseOffset : nextSelection.extentOffset;
      return new text_editing.TextSelection.fromPosition(new ui.TextPosition.new({offset: newOffset}));
    }
    static _getLeftByWord(textPainter, offset, includeWhitespace = true) {
      if (textPainter == null) dart.nullFailed(I[0], 793, 41, "textPainter");
      if (offset == null) dart.nullFailed(I[0], 793, 58, "offset");
      if (includeWhitespace == null) dart.nullFailed(I[0], 793, 72, "includeWhitespace");
      if (dart.notNull(offset) <= 0) {
        return offset;
      }
      if (offset === 1) {
        return 0;
      }
      let text = dart.nullCheck(textPainter.text).toPlainText();
      let startPoint = editable.RenderEditable.previousCharacter(offset, text, includeWhitespace);
      let word = textPainter.getWordBoundary(new ui.TextPosition.new({offset: startPoint}));
      return word.start;
    }
    static _getRightByWord(textPainter, offset, includeWhitespace = true) {
      if (textPainter == null) dart.nullFailed(I[0], 812, 42, "textPainter");
      if (offset == null) dart.nullFailed(I[0], 812, 59, "offset");
      if (includeWhitespace == null) dart.nullFailed(I[0], 812, 73, "includeWhitespace");
      let text = dart.nullCheck(textPainter.text).toPlainText();
      if (offset === text.length) {
        return offset;
      }
      if (offset === text.length - 1 || offset === text.length) {
        return text.length;
      }
      let startPoint = dart.test(includeWhitespace) || !dart.test(editable._isWhitespace(text[$codeUnitAt](offset))) ? offset : editable.RenderEditable.nextCharacter(offset, text, includeWhitespace);
      let nextWord = textPainter.getWordBoundary(new ui.TextPosition.new({offset: startPoint}));
      return nextWord.end;
    }
    static _extendGivenSelectionLeftByWord(textPainter, selection, includeWhitespace = true, stopAtReversal = false) {
      if (textPainter == null) dart.nullFailed(I[0], 836, 68, "textPainter");
      if (selection == null) dart.nullFailed(I[0], 836, 95, "selection");
      if (includeWhitespace == null) dart.nullFailed(I[0], 836, 112, "includeWhitespace");
      if (stopAtReversal == null) dart.nullFailed(I[0], 836, 143, "stopAtReversal");
      if (dart.test(selection.isCollapsed) && dart.notNull(selection.extentOffset) <= 0) {
        return selection;
      }
      let leftOffset = editable.RenderEditable._getLeftByWord(textPainter, selection.extentOffset, includeWhitespace);
      if (dart.test(stopAtReversal) && dart.notNull(selection.extentOffset) > dart.notNull(selection.baseOffset) && dart.notNull(leftOffset) < dart.notNull(selection.baseOffset)) {
        return selection.copyWith({extentOffset: selection.baseOffset});
      }
      return selection.copyWith({extentOffset: leftOffset});
    }
    static _extendGivenSelectionRightByWord(textPainter, selection, includeWhitespace = true, stopAtReversal = false) {
      if (textPainter == null) dart.nullFailed(I[0], 861, 69, "textPainter");
      if (selection == null) dart.nullFailed(I[0], 861, 96, "selection");
      if (includeWhitespace == null) dart.nullFailed(I[0], 861, 113, "includeWhitespace");
      if (stopAtReversal == null) dart.nullFailed(I[0], 861, 144, "stopAtReversal");
      let text = dart.nullCheck(textPainter.text).toPlainText();
      if (dart.test(selection.isCollapsed) && selection.extentOffset === text.length) {
        return selection;
      }
      let rightOffset = editable.RenderEditable._getRightByWord(textPainter, selection.extentOffset, includeWhitespace);
      if (dart.test(stopAtReversal) && dart.notNull(selection.baseOffset) > dart.notNull(selection.extentOffset) && dart.notNull(rightOffset) > dart.notNull(selection.baseOffset)) {
        return selection.copyWith({extentOffset: selection.baseOffset});
      }
      return selection.copyWith({extentOffset: rightOffset});
    }
    static _moveGivenSelectionLeftByWord(textPainter, selection, includeWhitespace = true) {
      if (textPainter == null) dart.nullFailed(I[0], 886, 66, "textPainter");
      if (selection == null) dart.nullFailed(I[0], 886, 93, "selection");
      if (includeWhitespace == null) dart.nullFailed(I[0], 886, 110, "includeWhitespace");
      if (dart.test(selection.isCollapsed) && dart.notNull(selection.extentOffset) <= 0) {
        return selection;
      }
      let leftOffset = editable.RenderEditable._getLeftByWord(textPainter, selection.extentOffset, includeWhitespace);
      return selection.copyWith({baseOffset: leftOffset, extentOffset: leftOffset});
    }
    static _moveGivenSelectionRightByWord(textPainter, selection, includeWhitespace = true) {
      if (textPainter == null) dart.nullFailed(I[0], 903, 67, "textPainter");
      if (selection == null) dart.nullFailed(I[0], 903, 94, "selection");
      if (includeWhitespace == null) dart.nullFailed(I[0], 903, 111, "includeWhitespace");
      let text = dart.nullCheck(textPainter.text).toPlainText();
      if (dart.test(selection.isCollapsed) && selection.extentOffset === text.length) {
        return selection;
      }
      let rightOffset = editable.RenderEditable._getRightByWord(textPainter, selection.extentOffset, includeWhitespace);
      return selection.copyWith({baseOffset: rightOffset, extentOffset: rightOffset});
    }
    static _extendGivenSelectionLeft(selection, text, includeWhitespace = true) {
      if (selection == null) dart.nullFailed(I[0], 917, 64, "selection");
      if (text == null) dart.nullFailed(I[0], 917, 82, "text");
      if (includeWhitespace == null) dart.nullFailed(I[0], 917, 94, "includeWhitespace");
      if (dart.notNull(selection.extentOffset) <= 0) {
        return selection;
      }
      let previousExtent = editable.RenderEditable.previousCharacter(selection.extentOffset, text, includeWhitespace);
      return selection.copyWith({extentOffset: previousExtent});
    }
    static _extendGivenSelectionRight(selection, text, includeWhitespace = true) {
      if (selection == null) dart.nullFailed(I[0], 926, 65, "selection");
      if (text == null) dart.nullFailed(I[0], 926, 83, "text");
      if (includeWhitespace == null) dart.nullFailed(I[0], 926, 95, "includeWhitespace");
      if (dart.notNull(selection.extentOffset) >= text.length) {
        return selection;
      }
      let nextExtent = editable.RenderEditable.nextCharacter(selection.extentOffset, text, includeWhitespace);
      return selection.copyWith({extentOffset: nextExtent});
    }
    [_extendSelectionToEnd](cause) {
      if (cause == null) dart.nullFailed(I[0], 946, 52, "cause");
      if (dart.nullCheck(this.selection).extentOffset === this[_plainText].length) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionToEnd(cause);
      }
      let nextSelection = dart.nullCheck(this.selection).copyWith({extentOffset: this[_plainText].length});
      this[_setSelection](nextSelection, cause);
    }
    [_extendSelectionToStart](cause) {
      if (cause == null) dart.nullFailed(I[0], 971, 54, "cause");
      if (dart.nullCheck(this.selection).extentOffset === 0) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionToStart(cause);
      }
      let nextSelection = dart.nullCheck(this.selection).copyWith({extentOffset: 0});
      this[_setSelection](nextSelection, cause);
    }
    [_getTextPositionVertical](textOffset, verticalOffset) {
      if (textOffset == null) dart.nullFailed(I[0], 986, 45, "textOffset");
      if (verticalOffset == null) dart.nullFailed(I[0], 986, 64, "verticalOffset");
      let caretOffset = this[_textPainter].getOffsetForCaret(new ui.TextPosition.new({offset: textOffset}), this[_caretPrototype]);
      let caretOffsetTranslated = caretOffset.translate(0.0, verticalOffset);
      return this[_textPainter].getPositionForOffset(caretOffsetTranslated);
    }
    [_getTextPositionAbove](offset) {
      if (offset == null) dart.nullFailed(I[0], 996, 42, "offset");
      let preferredLineHeight = this[_textPainter].preferredLineHeight;
      let verticalOffset = -0.5 * dart.notNull(preferredLineHeight);
      return this[_getTextPositionVertical](offset, verticalOffset);
    }
    [_getTextPositionBelow](offset) {
      if (offset == null) dart.nullFailed(I[0], 1009, 42, "offset");
      let preferredLineHeight = this[_textPainter].preferredLineHeight;
      let verticalOffset = 1.5 * dart.notNull(preferredLineHeight);
      return this[_getTextPositionVertical](offset, verticalOffset);
    }
    extendSelectionDown(cause) {
      if (cause == null) dart.nullFailed(I[0], 1032, 50, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1033, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.notNull(dart.nullCheck(this.selection).extentOffset) >= this[_plainText].length) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionDown(cause);
      }
      let positionBelow = this[_getTextPositionBelow](dart.nullCheck(this.selection).extentOffset);
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t6) {
        if (t6 == null) dart.nullFailed(I[0], 1045, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t6;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (positionBelow.offset == dart.nullCheck(this.selection).extentOffset) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: this[_plainText].length}));
        this[_wasSelectingVerticallyWithKeyboard] = true;
      } else if (dart.test(this[_wasSelectingVerticallyWithKeyboard])) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: this[_cursorResetLocation]}));
        this[_wasSelectingVerticallyWithKeyboard] = false;
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: positionBelow.offset}));
        this[_cursorResetLocation] = nextSelection$35get().extentOffset;
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    expandSelectionToEnd(cause) {
      if (cause == null) dart.nullFailed(I[0], 1080, 51, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1081, 12, "selection != null");
      if (dart.nullCheck(this.selection).extentOffset === this[_plainText].length) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionToEnd(cause);
      }
      let firstOffset = math.max(core.int, 0, math.min(core.int, dart.nullCheck(this.selection).baseOffset, dart.nullCheck(this.selection).extentOffset));
      let nextSelection = new text_editing.TextSelection.new({baseOffset: firstOffset, extentOffset: this[_plainText].length});
      this[_setSelection](nextSelection, cause);
    }
    extendSelectionLeft(cause) {
      if (cause == null) dart.nullFailed(I[0], 1112, 50, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1113, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionLeft(cause);
      }
      let nextSelection = editable.RenderEditable._extendGivenSelectionLeft(dart.nullCheck(this.selection), this[_plainText]);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      let distance = dart.notNull(dart.nullCheck(this.selection).extentOffset) - dart.notNull(nextSelection.extentOffset);
      this[_cursorResetLocation] = dart.notNull(this[_cursorResetLocation]) - distance;
      this[_setSelection](nextSelection, cause);
    }
    extendSelectionLeftByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1149, 56, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1150, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionLeftByLine(cause);
      }
      let startPoint = editable.RenderEditable.previousCharacter(dart.nullCheck(this.selection).extentOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t11) {
        if (t11 == null) dart.nullFailed(I[0], 1163, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t11;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (dart.notNull(dart.nullCheck(this.selection).extentOffset) > dart.notNull(dart.nullCheck(this.selection).baseOffset)) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: dart.nullCheck(this.selection).baseOffset}));
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: selectedLine.baseOffset}));
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    extendSelectionRight(cause) {
      if (cause == null) dart.nullFailed(I[0], 1188, 51, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1189, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionRight(cause);
      }
      let nextSelection = editable.RenderEditable._extendGivenSelectionRight(dart.nullCheck(this.selection), this[_plainText]);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      let distance = dart.notNull(nextSelection.extentOffset) - dart.notNull(dart.nullCheck(this.selection).extentOffset);
      this[_cursorResetLocation] = dart.notNull(this[_cursorResetLocation]) + distance;
      this[_setSelection](nextSelection, cause);
    }
    extendSelectionRightByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1225, 57, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1226, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionRightByLine(cause);
      }
      let startPoint = editable.RenderEditable.nextCharacter(dart.nullCheck(this.selection).extentOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t16) {
        if (t16 == null) dart.nullFailed(I[0], 1235, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t16;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (dart.notNull(dart.nullCheck(this.selection).extentOffset) < dart.notNull(dart.nullCheck(this.selection).baseOffset)) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: dart.nullCheck(this.selection).baseOffset}));
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: selectedLine.extentOffset}));
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    extendSelectionUp(cause) {
      if (cause == null) dart.nullFailed(I[0], 1262, 48, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1263, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.notNull(dart.nullCheck(this.selection).extentOffset) <= 0.0) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionUp(cause);
      }
      let positionAbove = this[_getTextPositionAbove](dart.nullCheck(this.selection).extentOffset);
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t21) {
        if (t21 == null) dart.nullFailed(I[0], 1275, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t21;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (positionAbove.offset == dart.nullCheck(this.selection).extentOffset) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: 0}));
        this[_wasSelectingVerticallyWithKeyboard] = true;
      } else if (dart.test(this[_wasSelectingVerticallyWithKeyboard])) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: dart.nullCheck(this.selection).baseOffset, extentOffset: this[_cursorResetLocation]}));
        this[_wasSelectingVerticallyWithKeyboard] = false;
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: dart.nullCheck(this.selection).baseOffset, extentOffset: positionAbove.offset}));
        this[_cursorResetLocation] = nextSelection$35get().extentOffset;
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    expandSelectionToStart(cause) {
      if (cause == null) dart.nullFailed(I[0], 1313, 53, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1314, 12, "selection != null");
      if (dart.nullCheck(this.selection).extentOffset === 0) {
        return;
      }
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionToStart(cause);
      }
      let lastOffset = math.max(core.int, 0, math.max(core.int, dart.nullCheck(this.selection).baseOffset, dart.nullCheck(this.selection).extentOffset));
      let nextSelection = new text_editing.TextSelection.new({baseOffset: lastOffset, extentOffset: 0});
      this[_setSelection](nextSelection, cause);
    }
    expandSelectionLeftByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1349, 56, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1350, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionLeftByLine(cause);
      }
      let firstOffset = math.min(core.int, dart.nullCheck(this.selection).baseOffset, dart.nullCheck(this.selection).extentOffset);
      let startPoint = editable.RenderEditable.previousCharacter(firstOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t26) {
        if (t26 == null) dart.nullFailed(I[0], 1360, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t26;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (dart.notNull(dart.nullCheck(this.selection).extentOffset) <= dart.notNull(dart.nullCheck(this.selection).baseOffset)) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: selectedLine.baseOffset}));
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: selectedLine.baseOffset}));
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    extendSelectionLeftByWord(cause, includeWhitespace = true, stopAtReversal = false) {
      if (cause == null) dart.nullFailed(I[0], 1394, 56, "cause");
      if (includeWhitespace == null) dart.nullFailed(I[0], 1394, 69, "includeWhitespace");
      if (stopAtReversal == null) dart.nullFailed(I[0], 1394, 100, "stopAtReversal");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1395, 12, "selection != null");
      if (dart.test(this.obscureText)) {
        return this[_extendSelectionToStart](cause);
      }
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 1403, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let nextSelection = editable.RenderEditable._extendGivenSelectionLeftByWord(this[_textPainter], dart.nullCheck(this.selection), includeWhitespace, stopAtReversal);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_setSelection](nextSelection, cause);
    }
    extendSelectionRightByWord(cause, includeWhitespace = true, stopAtReversal = false) {
      if (cause == null) dart.nullFailed(I[0], 1434, 57, "cause");
      if (includeWhitespace == null) dart.nullFailed(I[0], 1434, 70, "includeWhitespace");
      if (stopAtReversal == null) dart.nullFailed(I[0], 1434, 101, "stopAtReversal");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1435, 12, "selection != null");
      if (dart.test(this.obscureText)) {
        return this[_extendSelectionToEnd](cause);
      }
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 1443, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let nextSelection = editable.RenderEditable._extendGivenSelectionRightByWord(this[_textPainter], dart.nullCheck(this.selection), includeWhitespace, stopAtReversal);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_setSelection](nextSelection, cause);
    }
    expandSelectionRightByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1474, 57, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1475, 12, "selection != null");
      if (!dart.test(this.selectionEnabled)) {
        return this.moveSelectionRightByLine(cause);
      }
      let lastOffset = math.max(core.int, dart.nullCheck(this.selection).baseOffset, dart.nullCheck(this.selection).extentOffset);
      let startPoint = editable.RenderEditable.nextCharacter(lastOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t31) {
        if (t31 == null) dart.nullFailed(I[0], 1485, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t31;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (dart.notNull(dart.nullCheck(this.selection).extentOffset) >= dart.notNull(dart.nullCheck(this.selection).baseOffset)) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({extentOffset: selectedLine.extentOffset}));
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: selectedLine.extentOffset}));
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    moveSelectionDown(cause) {
      if (cause == null) dart.nullFailed(I[0], 1506, 48, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1507, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.notNull(dart.nullCheck(this.selection).extentOffset) >= this[_plainText].length) {
        return;
      }
      let positionBelow = this[_getTextPositionBelow](dart.nullCheck(this.selection).extentOffset);
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t36) {
        if (t36 == null) dart.nullFailed(I[0], 1517, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t36;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (positionBelow.offset == dart.nullCheck(this.selection).extentOffset) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: this[_plainText].length, extentOffset: this[_plainText].length}));
        this[_wasSelectingVerticallyWithKeyboard] = false;
      } else {
        nextSelection$35set(new text_editing.TextSelection.fromPosition(positionBelow));
        this[_cursorResetLocation] = nextSelection$35get().extentOffset;
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    moveSelectionLeft(cause) {
      if (cause == null) dart.nullFailed(I[0], 1539, 48, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1540, 12, "selection != null");
      let nextSelection = editable.RenderEditable._moveGivenSelectionLeft(dart.nullCheck(this.selection), this[_plainText]);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_cursorResetLocation] = dart.notNull(this[_cursorResetLocation]) - (dart.notNull(dart.nullCheck(this.selection).extentOffset) - dart.notNull(nextSelection.extentOffset));
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionLeftByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1561, 54, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1562, 12, "selection != null");
      let previousPoint = editable.RenderEditable.previousCharacter(dart.nullCheck(this.selection).extentOffset, this[_plainText], true);
      let line = this[_getLineAtOffset](new ui.TextPosition.new({offset: previousPoint}));
      if (line.extentOffset == previousPoint) {
        return;
      }
      let startPoint = editable.RenderEditable.previousCharacter(dart.nullCheck(this.selection).extentOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = new text_editing.TextSelection.collapsed({offset: selectedLine.baseOffset});
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionLeftByWord(cause, includeWhitespace = true) {
      if (cause == null) dart.nullFailed(I[0], 1596, 54, "cause");
      if (includeWhitespace == null) dart.nullFailed(I[0], 1596, 67, "includeWhitespace");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1597, 12, "selection != null");
      if (dart.test(this.obscureText)) {
        return this.moveSelectionToStart(cause);
      }
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 1605, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let nextSelection = editable.RenderEditable._moveGivenSelectionLeftByWord(this[_textPainter], dart.nullCheck(this.selection), includeWhitespace);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionRight(cause) {
      if (cause == null) dart.nullFailed(I[0], 1627, 49, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1628, 12, "selection != null");
      let nextSelection = editable.RenderEditable._moveGivenSelectionRight(dart.nullCheck(this.selection), this[_plainText]);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionRightByLine(cause) {
      if (cause == null) dart.nullFailed(I[0], 1648, 55, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1649, 12, "selection != null");
      let currentLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: dart.nullCheck(this.selection).extentOffset}));
      if (currentLine.extentOffset == dart.nullCheck(this.selection).extentOffset) {
        return;
      }
      let startPoint = editable.RenderEditable.nextCharacter(dart.nullCheck(this.selection).extentOffset, this[_plainText], false);
      let selectedLine = this[_getLineAtOffset](new ui.TextPosition.new({offset: startPoint}));
      let nextSelection = new text_editing.TextSelection.collapsed({offset: selectedLine.extentOffset});
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionRightByWord(cause, includeWhitespace = true) {
      if (cause == null) dart.nullFailed(I[0], 1684, 55, "cause");
      if (includeWhitespace == null) dart.nullFailed(I[0], 1684, 68, "includeWhitespace");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1685, 12, "selection != null");
      if (dart.test(this.obscureText)) {
        return this.moveSelectionToEnd(cause);
      }
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 1693, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let nextSelection = editable.RenderEditable._moveGivenSelectionRightByWord(this[_textPainter], dart.nullCheck(this.selection), includeWhitespace);
      if (dart.equals(nextSelection, this.selection)) {
        return;
      }
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionToEnd(cause) {
      if (cause == null) dart.nullFailed(I[0], 1716, 49, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1717, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.nullCheck(this.selection).extentOffset === this[_plainText].length) {
        return;
      }
      let nextSelection = new text_editing.TextSelection.collapsed({offset: this[_plainText].length});
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionToStart(cause) {
      if (cause == null) dart.nullFailed(I[0], 1735, 51, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1736, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.nullCheck(this.selection).extentOffset === 0) {
        return;
      }
      let nextSelection = C[9] || CT.C9;
      this[_setSelection](nextSelection, cause);
    }
    moveSelectionUp(cause) {
      if (cause == null) dart.nullFailed(I[0], 1752, 46, "cause");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 1753, 12, "selection != null");
      if (dart.test(dart.nullCheck(this.selection).isCollapsed) && dart.notNull(dart.nullCheck(this.selection).extentOffset) <= 0.0) {
        return;
      }
      let positionAbove = this[_getTextPositionAbove](dart.nullCheck(this.selection).extentOffset);
      let nextSelection = null;
      let nextSelection$35isSet = false;
      function nextSelection$35get() {
        return nextSelection$35isSet ? nextSelection : dart.throw(new _internal.LateError.localNI("nextSelection"));
      }
      dart.fn(nextSelection$35get, T.VoidToTextSelection());
      function nextSelection$35set(t41) {
        if (t41 == null) dart.nullFailed(I[0], 1762, 30, "null");
        if (nextSelection$35isSet)
          dart.throw(new _internal.LateError.localAI("nextSelection"));
        else {
          nextSelection$35isSet = true;
          return nextSelection = t41;
        }
      }
      dart.fn(nextSelection$35set, T.TextSelectionTodynamic());
      if (positionAbove.offset == dart.nullCheck(this.selection).extentOffset) {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: 0, extentOffset: 0}));
        this[_wasSelectingVerticallyWithKeyboard] = false;
      } else {
        nextSelection$35set(dart.nullCheck(this.selection).copyWith({baseOffset: positionAbove.offset, extentOffset: positionAbove.offset}));
        this[_cursorResetLocation] = nextSelection$35get().extentOffset;
      }
      this[_setSelection](nextSelection$35get(), cause);
    }
    [_handleShortcuts](key) {
      if (key == null) dart.nullFailed(I[0], 1779, 52, "key");
      return async.async(dart.void, (function* _handleShortcuts() {
        let selection = this.textSelectionDelegate.textEditingValue.selection;
        let text = this.textSelectionDelegate.textEditingValue.text;
        if (!(selection != null)) dart.assertFailed(null, I[0], 1782, 12, "selection != null");
        if (!dart.test(editable.RenderEditable._shortcutKeys.contains(key))) dart.assertFailed("shortcut key " + dart.str(key) + " not recognized.", I[0], 1783, 12, "_shortcutKeys.contains(key)");
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyC)) {
          if (!dart.test(selection.isCollapsed)) {
            clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: selection.textInside(text)}));
          }
          return;
        }
        let value = null;
        if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyX) && !dart.test(this[_readOnly])) {
          if (!dart.test(selection.isCollapsed)) {
            clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: selection.textInside(text)}));
            value = new text_input.TextEditingValue.new({text: dart.notNull(selection.textBefore(text)) + dart.notNull(selection.textAfter(text)), selection: new text_editing.TextSelection.collapsed({offset: math.min(core.int, selection.start, selection.end)})});
          }
        } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyV) && !dart.test(this[_readOnly])) {
          let data = (yield clipboard.Clipboard.getData("text/plain"));
          if (data != null) {
            value = new text_input.TextEditingValue.new({text: dart.notNull(selection.textBefore(text)) + dart.nullCheck(data.text) + dart.notNull(selection.textAfter(text)), selection: new text_editing.TextSelection.collapsed({offset: math.min(core.int, selection.start, selection.end) + dart.nullCheck(data.text).length})});
          }
        } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.keyA)) {
          value = new text_input.TextEditingValue.new({text: text, selection: selection.copyWith({baseOffset: 0, extentOffset: this.textSelectionDelegate.textEditingValue.text.length})});
        }
        if (value != null) {
          this[_setTextEditingValue](value, text_input.SelectionChangedCause.keyboard);
        }
      }).bind(this));
    }
    [_handleDelete](opts) {
      let forward = opts && 'forward' in opts ? opts.forward : null;
      if (forward == null) dart.nullFailed(I[0], 1828, 38, "forward");
      let selection = this.textSelectionDelegate.textEditingValue.selection;
      let text = this.textSelectionDelegate.textEditingValue.text;
      if (!(this[_selection] != null)) dart.assertFailed(null, I[0], 1831, 12, "_selection != null");
      if (dart.test(this[_readOnly]) || !dart.test(selection.isValid)) {
        return;
      }
      let textBefore = selection.textBefore(text);
      let textAfter = selection.textAfter(text);
      let cursorPosition = math.min(core.int, selection.start, selection.end);
      if (dart.test(selection.isCollapsed)) {
        if (!dart.test(forward) && textBefore[$isNotEmpty]) {
          let characterBoundary = editable.RenderEditable.previousCharacter(textBefore.length, textBefore);
          textBefore = textBefore[$substring](0, characterBoundary);
          cursorPosition = characterBoundary;
        }
        if (dart.test(forward) && textAfter[$isNotEmpty]) {
          let deleteCount = editable.RenderEditable.nextCharacter(0, textAfter);
          textAfter = textAfter[$substring](deleteCount);
        }
      }
      let newSelection = new text_editing.TextSelection.collapsed({offset: cursorPosition});
      this[_setTextEditingValue](new text_input.TextEditingValue.new({text: dart.notNull(textBefore) + dart.notNull(textAfter), selection: newSelection}), text_input.SelectionChangedCause.keyboard);
    }
    markNeedsPaint() {
      let t43, t43$;
      super.markNeedsPaint();
      t43 = this[_foregroundRenderObject];
      t43 == null ? null : t43.markNeedsPaint();
      t43$ = this[_backgroundRenderObject];
      t43$ == null ? null : t43$.markNeedsPaint();
    }
    markNeedsTextLayout() {
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
      this.markNeedsLayout();
    }
    systemFontsDidChange() {
      super.systemFontsDidChange();
      this[_textPainter].markNeedsLayout();
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
    }
    get [_plainText]() {
      this[_cachedPlainText] == null ? this[_cachedPlainText] = dart.nullCheck(this[_textPainter].text).toPlainText({includeSemanticsLabels: false}) : null;
      return dart.nullCheck(this[_cachedPlainText]);
    }
    get text() {
      return T.TextSpanN().as(this[_textPainter].text);
    }
    set text(value) {
      if (dart.equals(this[_textPainter].text, value)) return;
      this[_textPainter].text = value;
      this[_cachedPlainText] = null;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get textAlign() {
      return this[_textPainter].textAlign;
    }
    set textAlign(value) {
      if (value == null) dart.nullFailed(I[0], 1913, 27, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1914, 12, "value != null");
      if (this[_textPainter].textAlign == value) return;
      this[_textPainter].textAlign = value;
      this.markNeedsTextLayout();
    }
    get textDirection() {
      return dart.nullCheck(this[_textPainter].textDirection);
    }
    set textDirection(value) {
      if (value == null) dart.nullFailed(I[0], 1938, 35, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1939, 12, "value != null");
      if (this[_textPainter].textDirection == value) return;
      this[_textPainter].textDirection = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get locale() {
      return this[_textPainter].locale;
    }
    set locale(value) {
      if (dart.equals(this[_textPainter].locale, value)) return;
      this[_textPainter].locale = value;
      this.markNeedsTextLayout();
    }
    get strutStyle() {
      return this[_textPainter].strutStyle;
    }
    set strutStyle(value) {
      if (dart.equals(this[_textPainter].strutStyle, value)) return;
      this[_textPainter].strutStyle = value;
      this.markNeedsTextLayout();
    }
    get cursorColor() {
      return this[_caretPainter].caretColor;
    }
    set cursorColor(value) {
      this[_caretPainter].caretColor = value;
    }
    get backgroundCursorColor() {
      return this[_caretPainter].backgroundCursorColor;
    }
    set backgroundCursorColor(value) {
      this[_caretPainter].backgroundCursorColor = value;
    }
    get showCursor() {
      return this[_showCursor];
    }
    set showCursor(value) {
      if (value == null) dart.nullFailed(I[0], 1993, 38, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1994, 12, "value != null");
      if (dart.equals(this[_showCursor], value)) return;
      if (dart.test(this.attached)) this[_showCursor].removeListener(dart.bind(this, _showHideCursor));
      this[_showCursor] = value;
      if (dart.test(this.attached)) {
        this[_showHideCursor]();
        this[_showCursor].addListener(dart.bind(this, _showHideCursor));
      }
    }
    [_showHideCursor]() {
      this[_caretPainter].shouldPaint = this.showCursor.value;
    }
    get hasFocus() {
      return this[_hasFocus];
    }
    set hasFocus(value) {
      if (value == null) dart.nullFailed(I[0], 2014, 21, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2015, 12, "value != null");
      if (this[_hasFocus] == value) return;
      this[_hasFocus] = value;
      this.markNeedsSemanticsUpdate();
      if (!dart.test(this.attached)) {
        if (!!dart.test(this[_listenerAttached])) dart.assertFailed(null, I[0], 2022, 14, "!_listenerAttached");
        return;
      }
      if (dart.test(this[_hasFocus])) {
        if (!!dart.test(this[_listenerAttached])) dart.assertFailed(null, I[0], 2027, 14, "!_listenerAttached");
        raw_keyboard.RawKeyboard.instance.addListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = true;
      } else {
        if (!dart.test(this[_listenerAttached])) dart.assertFailed(null, I[0], 2033, 14, "_listenerAttached");
        raw_keyboard.RawKeyboard.instance.removeListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = false;
      }
    }
    get forceLine() {
      return this[_forceLine];
    }
    set forceLine(value) {
      if (value == null) dart.nullFailed(I[0], 2044, 22, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2045, 12, "value != null");
      if (this[_forceLine] == value) return;
      this[_forceLine] = value;
      this.markNeedsLayout();
    }
    get readOnly() {
      return this[_readOnly];
    }
    set readOnly(value) {
      if (value == null) dart.nullFailed(I[0], 2055, 21, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2056, 12, "value != null");
      if (this[_readOnly] == value) return;
      this[_readOnly] = value;
      this.markNeedsSemanticsUpdate();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[0], 2077, 12, "value == null || value > 0");
      if (this.maxLines == value) return;
      this[_maxLines] = value;
      this.markNeedsTextLayout();
    }
    get minLines() {
      return this[_minLines];
    }
    set minLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[0], 2089, 12, "value == null || value > 0");
      if (this.minLines == value) return;
      this[_minLines] = value;
      this.markNeedsTextLayout();
    }
    get expands() {
      return this[_expands];
    }
    set expands(value) {
      if (value == null) dart.nullFailed(I[0], 2099, 20, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2100, 12, "value != null");
      if (this.expands == value) return;
      this[_expands] = value;
      this.markNeedsTextLayout();
    }
    get selectionColor() {
      return this[_selectionPainter].highlightColor;
    }
    set selectionColor(value) {
      this[_selectionPainter].highlightColor = value;
    }
    get textScaleFactor() {
      return this[_textPainter].textScaleFactor;
    }
    set textScaleFactor(value) {
      if (value == null) dart.nullFailed(I[0], 2118, 30, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2119, 12, "value != null");
      if (this[_textPainter].textScaleFactor == value) return;
      this[_textPainter].textScaleFactor = value;
      this.markNeedsTextLayout();
    }
    get selection() {
      return this[_selection];
    }
    set selection(value) {
      if (dart.equals(this[_selection], value)) return;
      this[_selection] = value;
      this[_selectionPainter].highlightedRange = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (value == null) dart.nullFailed(I[0], 2150, 29, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2151, 12, "value != null");
      if (dart.equals(this[_offset], value)) return;
      if (dart.test(this.attached)) this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_offset] = value;
      if (dart.test(this.attached)) this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      this.markNeedsLayout();
    }
    get cursorWidth() {
      return this[_cursorWidth];
    }
    set cursorWidth(value) {
      if (value == null) dart.nullFailed(I[0], 2165, 26, "value");
      if (this[_cursorWidth] == value) return;
      this[_cursorWidth] = value;
      this.markNeedsLayout();
    }
    get cursorHeight() {
      let t43;
      t43 = this[_cursorHeight];
      return t43 == null ? this.preferredLineHeight : t43;
    }
    set cursorHeight(value) {
      if (this[_cursorHeight] == value) return;
      this[_cursorHeight] = value;
      this.markNeedsLayout();
    }
    get paintCursorAboveText() {
      return this[_paintCursorOnTop];
    }
    set paintCursorAboveText(value) {
      if (value == null) dart.nullFailed(I[0], 2196, 33, "value");
      if (this[_paintCursorOnTop] == value) return;
      this[_paintCursorOnTop] = value;
      this[_cachedBuiltInForegroundPainters] = null;
      this[_cachedBuiltInPainters] = null;
      this[_updateForegroundPainter](this[_foregroundPainter]);
      this[_updatePainter](this[_painter]);
    }
    get cursorOffset() {
      return this[_caretPainter].cursorOffset;
    }
    set cursorOffset(value) {
      if (value == null) dart.nullFailed(I[0], 2217, 27, "value");
      this[_caretPainter].cursorOffset = value;
    }
    get cursorRadius() {
      return this[_caretPainter].cursorRadius;
    }
    set cursorRadius(value) {
      this[_caretPainter].cursorRadius = value;
    }
    get startHandleLayerLink() {
      return this[_startHandleLayerLink];
    }
    set startHandleLayerLink(value) {
      if (value == null) dart.nullFailed(I[0], 2235, 38, "value");
      if (dart.equals(this[_startHandleLayerLink], value)) return;
      this[_startHandleLayerLink] = value;
      this.markNeedsPaint();
    }
    get endHandleLayerLink() {
      return this[_endHandleLayerLink];
    }
    set endHandleLayerLink(value) {
      if (value == null) dart.nullFailed(I[0], 2248, 36, "value");
      if (dart.equals(this[_endHandleLayerLink], value)) return;
      this[_endHandleLayerLink] = value;
      this.markNeedsPaint();
    }
    set [_floatingCursorTextPosition](t43) {
      if (t43 == null) dart.nullFailed(I[0], 2262, 21, "null");
      this[__RenderEditable__floatingCursorTextPosition_isSet] = true;
      this[__RenderEditable__floatingCursorTextPosition] = t43;
    }
    get [_floatingCursorTextPosition]() {
      let t44;
      return dart.test(this[__RenderEditable__floatingCursorTextPosition_isSet]) ? (t44 = this[__RenderEditable__floatingCursorTextPosition], t44) : dart.throw(new _internal.LateError.fieldNI("_floatingCursorTextPosition"));
    }
    get enableInteractiveSelection() {
      return this[_enableInteractiveSelection];
    }
    set enableInteractiveSelection(value) {
      if (this[_enableInteractiveSelection] == value) return;
      this[_enableInteractiveSelection] = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get selectionEnabled() {
      let t44;
      t44 = this.enableInteractiveSelection;
      return t44 == null ? !dart.test(this.obscureText) : t44;
    }
    get promptRectColor() {
      return this[_autocorrectHighlightPainter].highlightColor;
    }
    set promptRectColor(newValue) {
      this[_autocorrectHighlightPainter].highlightColor = newValue;
    }
    setPromptRectRange(newRange) {
      this[_autocorrectHighlightPainter].highlightedRange = newRange;
    }
    get maxScrollExtent() {
      return this[_maxScrollExtent];
    }
    get [_caretMargin]() {
      return 1 + dart.notNull(this.cursorWidth);
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (value == null) dart.nullFailed(I[0], 2347, 25, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 2348, 12, "value != null");
      if (value != this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    describeSemanticsConfiguration(config) {
      let t44, t44$, t44$0, t44$1, t44$2;
      if (config == null) dart.nullFailed(I[0], 2367, 62, "config");
      super.describeSemanticsConfiguration(config);
      this[_semanticsInfo] = dart.nullCheck(this[_textPainter].text).getSemanticsInformation();
      if (dart.test(dart.nullCheck(this[_semanticsInfo])[$any](dart.fn(info => {
        if (info == null) dart.nullFailed(I[0], 2374, 61, "info");
        return info.recognizer != null;
      }, T.InlineSpanSemanticsInformationTobool()))) && platform.defaultTargetPlatform != platform.TargetPlatform.macOS) {
        if (!(dart.test(this.readOnly) && !dart.test(this.obscureText))) dart.assertFailed(null, I[0], 2376, 14, "readOnly && !obscureText");
        t44 = config;
        (() => {
          t44.isSemanticBoundary = true;
          t44.explicitChildNodes = true;
          return t44;
        })();
        return;
      }
      t44$ = config;
      (() => {
        t44$.value = dart.test(this.obscureText) ? this.obscuringCharacter[$times](this[_plainText].length) : this[_plainText];
        t44$.isObscured = this.obscureText;
        t44$.isMultiline = this[_isMultiline];
        t44$.textDirection = this.textDirection;
        t44$.isFocused = this.hasFocus;
        t44$.isTextField = true;
        t44$.isReadOnly = this.readOnly;
        return t44$;
      })();
      if (dart.test(this.hasFocus) && dart.test(this.selectionEnabled)) config.onSetSelection = dart.bind(this, _handleSetSelection);
      if (dart.test(this.hasFocus) && !dart.test(this.readOnly)) config.onSetText = dart.bind(this, _handleSetText);
      if (dart.test(this.selectionEnabled) && (t44$0 = this.selection, t44$0 == null ? null : t44$0.isValid) === true) {
        config.textSelection = this.selection;
        if (this[_textPainter].getOffsetBefore(dart.nullCheck(this.selection).extentOffset) != null) {
          t44$1 = config;
          (() => {
            t44$1.onMoveCursorBackwardByWord = dart.bind(this, _handleMoveCursorBackwardByWord);
            t44$1.onMoveCursorBackwardByCharacter = dart.bind(this, _handleMoveCursorBackwardByCharacter);
            return t44$1;
          })();
        }
        if (this[_textPainter].getOffsetAfter(dart.nullCheck(this.selection).extentOffset) != null) {
          t44$2 = config;
          (() => {
            t44$2.onMoveCursorForwardByWord = dart.bind(this, _handleMoveCursorForwardByWord);
            t44$2.onMoveCursorForwardByCharacter = dart.bind(this, _handleMoveCursorForwardByCharacter);
            return t44$2;
          })();
        }
      }
    }
    [_handleSetText](text) {
      if (text == null) dart.nullFailed(I[0], 2416, 30, "text");
      this.textSelectionDelegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: text, selection: new text_editing.TextSelection.collapsed({offset: text.length})}), text_input.SelectionChangedCause.keyboard);
    }
    assembleSemanticsNode(node, config, children) {
      let t45, t45$, t44, t44$, t44$0;
      if (node == null) dart.nullFailed(I[0], 2427, 44, "node");
      if (config == null) dart.nullFailed(I[0], 2427, 73, "config");
      if (children == null) dart.nullFailed(I[0], 2427, 105, "children");
      if (!(this[_semanticsInfo] != null && dart.test(dart.nullCheck(this[_semanticsInfo])[$isNotEmpty]))) dart.assertFailed(null, I[0], 2428, 12, "_semanticsInfo != null && _semanticsInfo!.isNotEmpty");
      let newChildren = T.JSArrayOfSemanticsNode().of([]);
      let currentDirection = this.textDirection;
      let currentRect = null;
      let ordinal = 0.0;
      let start = 0;
      let newChildCache = new (T.ListQueueOfSemanticsNode()).new();
      for (let info of inline_span.combineSemanticsInfo(dart.nullCheck(this[_semanticsInfo]))) {
        if (!!dart.test(info.isPlaceholder)) dart.assertFailed(null, I[0], 2436, 14, "!info.isPlaceholder");
        let selection = new text_editing.TextSelection.new({baseOffset: start, extentOffset: start + info.text.length});
        start = start + info.text.length;
        let initialDirection = currentDirection;
        let rects = this[_textPainter].getBoxesForSelection(selection);
        if (dart.test(rects[$isEmpty])) {
          continue;
        }
        let rect = rects[$first].toRect();
        currentDirection = rects[$first].direction;
        for (let textBox of rects[$skip](1)) {
          rect = rect.expandToInclude(textBox.toRect());
          currentDirection = textBox.direction;
        }
        rect = new ui.Rect.fromLTWH(math.max(core.double, 0.0, rect.left), math.max(core.double, 0.0, rect.top), math.min(core.double, rect.width, this.constraints.maxWidth), math.min(core.double, rect.height, this.constraints.maxHeight));
        currentRect = new ui.Rect.fromLTRB(rect.left[$floorToDouble]() - 4.0, rect.top[$floorToDouble]() - 4.0, rect.right[$ceilToDouble]() + 4.0, rect.bottom[$ceilToDouble]() + 4.0);
        let configuration = (t44 = new semantics.SemanticsConfiguration.new(), (() => {
          t44.sortKey = new semantics.OrdinalSortKey.new((t45 = ordinal, ordinal = t45 + 1, t45));
          t44.textDirection = initialDirection;
          t44.label = (t45$ = info.semanticsLabel, t45$ == null ? info.text : t45$);
          return t44;
        })());
        let recognizer = info.recognizer;
        if (recognizer != null) {
          if (tap.TapGestureRecognizer.is(recognizer)) {
            if (recognizer.onTap != null) {
              configuration.onTap = recognizer.onTap;
              configuration.isLink = true;
            }
          } else if (multitap.DoubleTapGestureRecognizer.is(recognizer)) {
            if (recognizer.onDoubleTap != null) {
              configuration.onTap = recognizer.onDoubleTap;
              configuration.isLink = true;
            }
          } else if (long_press.LongPressGestureRecognizer.is(recognizer)) {
            if (recognizer.onLongPress != null) {
              configuration.onLongPress = recognizer.onLongPress;
            }
          } else {
            if (!false) dart.assertFailed(dart.str(dart.runtimeType(recognizer)) + " is not supported.", I[0], 2491, 18, "false");
          }
        }
        let newChild = (t44$ = this[_cachedChildNodes], t44$ == null ? null : t44$[$isNotEmpty]) === true ? dart.nullCheck(this[_cachedChildNodes]).removeFirst() : new semantics.SemanticsNode.new();
        t44$0 = newChild;
        (() => {
          t44$0.updateWith({config: configuration});
          t44$0.rect = currentRect;
          return t44$0;
        })();
        newChildCache.addLast(newChild);
        newChildren[$add](newChild);
      }
      this[_cachedChildNodes] = newChildCache;
      node.updateWith({config: config, childrenInInversePaintOrder: newChildren});
    }
    [_handleSetSelection](selection) {
      if (selection == null) dart.nullFailed(I[0], 2511, 42, "selection");
      this[_setSelection](selection, text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByCharacter](extentSelection) {
      if (extentSelection == null) dart.nullFailed(I[0], 2515, 49, "extentSelection");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 2516, 12, "selection != null");
      let extentOffset = this[_textPainter].getOffsetAfter(dart.nullCheck(this.selection).extentOffset);
      if (extentOffset == null) return;
      let baseOffset = !dart.test(extentSelection) ? extentOffset : dart.nullCheck(this.selection).baseOffset;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByCharacter](extentSelection) {
      if (extentSelection == null) dart.nullFailed(I[0], 2527, 50, "extentSelection");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 2528, 12, "selection != null");
      let extentOffset = this[_textPainter].getOffsetBefore(dart.nullCheck(this.selection).extentOffset);
      if (extentOffset == null) return;
      let baseOffset = !dart.test(extentSelection) ? extentOffset : dart.nullCheck(this.selection).baseOffset;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByWord](extentSelection) {
      if (extentSelection == null) dart.nullFailed(I[0], 2539, 44, "extentSelection");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 2540, 12, "selection != null");
      let currentWord = this[_textPainter].getWordBoundary(dart.nullCheck(this.selection).extent);
      let nextWord = this[_getNextWord](currentWord.end);
      if (nextWord == null) return;
      let baseOffset = dart.test(extentSelection) ? dart.nullCheck(this.selection).baseOffset : nextWord.start;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: nextWord.start}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByWord](extentSelection) {
      if (extentSelection == null) dart.nullFailed(I[0], 2555, 45, "extentSelection");
      if (!(this.selection != null)) dart.assertFailed(null, I[0], 2556, 12, "selection != null");
      let currentWord = this[_textPainter].getWordBoundary(dart.nullCheck(this.selection).extent);
      let previousWord = this[_getPreviousWord](dart.notNull(currentWord.start) - 1);
      if (previousWord == null) return;
      let baseOffset = dart.test(extentSelection) ? dart.nullCheck(this.selection).baseOffset : previousWord.start;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: previousWord.start}), text_input.SelectionChangedCause.keyboard);
    }
    [_getNextWord](offset) {
      if (offset == null) dart.nullFailed(I[0], 2571, 31, "offset");
      while (true) {
        let range = this[_textPainter].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range == null || !dart.test(range.isValid) || dart.test(range.isCollapsed)) return null;
        if (!dart.test(this[_onlyWhitespace](range))) return range;
        offset = range.end;
      }
    }
    [_getPreviousWord](offset) {
      if (offset == null) dart.nullFailed(I[0], 2582, 35, "offset");
      while (dart.notNull(offset) >= 0) {
        let range = this[_textPainter].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range == null || !dart.test(range.isValid) || dart.test(range.isCollapsed)) return null;
        if (!dart.test(this[_onlyWhitespace](range))) return range;
        offset = dart.notNull(range.start) - 1;
      }
      return null;
    }
    [_onlyWhitespace](range) {
      if (range == null) dart.nullFailed(I[0], 2600, 34, "range");
      for (let i = range.start; dart.notNull(i) < dart.notNull(range.end); i = dart.notNull(i) + 1) {
        let codeUnit = dart.nullCheck(dart.nullCheck(this.text).codeUnitAt(i));
        if (!dart.test(editable._isWhitespace(codeUnit))) {
          return false;
        }
      }
      return true;
    }
    attach(owner) {
      let t44, t44$, t44$0, t44$1;
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 2611, 29, "owner");
      super.attach(owner);
      t44 = this[_foregroundRenderObject];
      t44 == null ? null : t44.attach(owner);
      t44$ = this[_backgroundRenderObject];
      t44$ == null ? null : t44$.attach(owner);
      this[_tap] = (t44$0 = new tap.TapGestureRecognizer.new({debugOwner: this}), (() => {
        t44$0.onTapDown = dart.bind(this, _handleTapDown);
        t44$0.onTap = dart.bind(this, _handleTap);
        return t44$0;
      })());
      this[_longPress] = (t44$1 = new long_press.LongPressGestureRecognizer.new({debugOwner: this}), (() => {
        t44$1.onLongPress = dart.bind(this, _handleLongPress);
        return t44$1;
      })());
      this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_showHideCursor]();
      this[_showCursor].addListener(dart.bind(this, _showHideCursor));
      if (!!dart.test(this[_listenerAttached])) dart.assertFailed(null, I[0], 2623, 12, "!_listenerAttached");
      if (dart.test(this[_hasFocus])) {
        raw_keyboard.RawKeyboard.instance.addListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = true;
      }
    }
    detach() {
      let t44, t44$;
      this[_tap].dispose();
      this[_longPress].dispose();
      this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_showCursor].removeListener(dart.bind(this, _showHideCursor));
      if (dart.test(this[_listenerAttached])) {
        raw_keyboard.RawKeyboard.instance.removeListener(dart.bind(this, _handleKeyEvent));
        this[_listenerAttached] = false;
      }
      super.detach();
      t44 = this[_foregroundRenderObject];
      t44 == null ? null : t44.detach();
      t44$ = this[_backgroundRenderObject];
      t44$ == null ? null : t44$.detach();
    }
    redepthChildren() {
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (foregroundChild != null) this.redepthChild(foregroundChild);
      if (backgroundChild != null) this.redepthChild(backgroundChild);
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[0], 2658, 42, "visitor");
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (foregroundChild != null) visitor(foregroundChild);
      if (backgroundChild != null) visitor(backgroundChild);
    }
    get [_isMultiline]() {
      return this.maxLines !== 1;
    }
    get [_viewportAxis]() {
      return dart.test(this[_isMultiline]) ? basic_types.Axis.vertical : basic_types.Axis.horizontal;
    }
    get [_paintOffset]() {
      switch (this[_viewportAxis]) {
        case C[11] || CT.C11:
        {
          return new ui.Offset.new(-dart.notNull(this.offset.pixels), 0.0);
        }
        case C[12] || CT.C12:
        {
          return new ui.Offset.new(0.0, -dart.notNull(this.offset.pixels));
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    get [_viewportExtent]() {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, I[0], 2681, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C[11] || CT.C11:
        {
          return this.size.width;
        }
        case C[12] || CT.C12:
        {
          return this.size.height;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_getMaxScrollExtent](contentSize) {
      if (contentSize == null) dart.nullFailed(I[0], 2690, 35, "contentSize");
      if (!dart.test(this.hasSize)) dart.assertFailed(null, I[0], 2691, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C[11] || CT.C11:
        {
          return math.max(core.double, 0.0, dart.notNull(contentSize.width) - dart.notNull(this.size.width));
        }
        case C[12] || CT.C12:
        {
          return math.max(core.double, 0.0, dart.notNull(contentSize.height) - dart.notNull(this.size.height));
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    get [_hasVisualOverflow]() {
      return dart.notNull(this[_maxScrollExtent]) > 0 || !dart.equals(this[_paintOffset], ui.Offset.zero);
    }
    getEndpointsForSelection(selection) {
      if (selection == null) dart.nullFailed(I[0], 2716, 67, "selection");
      if (!(this.constraints != null)) dart.assertFailed(null, I[0], 2717, 12, "constraints != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let paintOffset = this[_paintOffset];
      let boxes = dart.test(selection.isCollapsed) ? T.JSArrayOfTextBox().of([]) : this[_textPainter].getBoxesForSelection(selection);
      if (dart.test(boxes[$isEmpty])) {
        let caretOffset = this[_textPainter].getOffsetForCaret(selection.extent, this[_caretPrototype]);
        let start = new ui.Offset.new(0.0, this.preferredLineHeight)['+'](caretOffset)['+'](paintOffset);
        return T.JSArrayOfTextSelectionPoint().of([new editable.TextSelectionPoint.new(start, null)]);
      } else {
        let start = new ui.Offset.new(boxes[$first].start, boxes[$first].bottom)['+'](paintOffset);
        let end = new ui.Offset.new(boxes[$last].end, boxes[$last].bottom)['+'](paintOffset);
        return T.JSArrayOfTextSelectionPoint().of([new editable.TextSelectionPoint.new(start, boxes[$first].direction), new editable.TextSelectionPoint.new(end, boxes[$last].direction)]);
      }
    }
    getRectForComposingRange(range) {
      let t44;
      if (range == null) dart.nullFailed(I[0], 2747, 44, "range");
      if (!(this.constraints != null)) dart.assertFailed(null, I[0], 2748, 12, "constraints != null");
      if (!dart.test(range.isValid) || dart.test(range.isCollapsed)) return null;
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let boxes = this[_textPainter].getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: range.start, extentOffset: range.end}));
      t44 = boxes[$fold](T.RectN(), null, dart.fn((accum, incoming) => {
        let t44, t44$;
        if (incoming == null) dart.nullFailed(I[0], 2759, 29, "incoming");
        t44$ = (t44 = accum, t44 == null ? null : t44.expandToInclude(incoming.toRect()));
        return t44$ == null ? incoming.toRect() : t44$;
      }, T.RectNAndTextBoxToRect()));
      return t44 == null ? null : t44.shift(this[_paintOffset]);
    }
    getPositionForPoint(globalPosition) {
      if (globalPosition == null) dart.nullFailed(I[0], 2771, 43, "globalPosition");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      globalPosition = globalPosition['+'](this[_paintOffset]._negate());
      return this[_textPainter].getPositionForOffset(this.globalToLocal(globalPosition));
    }
    getLocalRectForCaret(caretPosition) {
      if (caretPosition == null) dart.nullFailed(I[0], 2788, 42, "caretPosition");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let caretOffset = this[_textPainter].getOffsetForCaret(caretPosition, this[_caretPrototype]);
      let rect = new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, this.cursorHeight).shift(caretOffset['+'](this[_paintOffset])['+'](this.cursorOffset));
      return rect.shift(this[_snapToPhysicalPixel](rect.topLeft));
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 2798, 42, "height");
      this[_layoutText]({maxWidth: 1 / 0});
      return this[_textPainter].minIntrinsicWidth;
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 2804, 42, "height");
      this[_layoutText]({maxWidth: 1 / 0});
      return dart.notNull(this[_textPainter].maxIntrinsicWidth) + dart.notNull(this.cursorWidth);
    }
    get preferredLineHeight() {
      return this[_textPainter].preferredLineHeight;
    }
    [_preferredHeight](width) {
      if (width == null) dart.nullFailed(I[0], 2813, 34, "width");
      let lockedMax = this.maxLines != null && this.minLines == null;
      let lockedBoth = this.minLines != null && this.minLines == this.maxLines;
      let singleLine = this.maxLines === 1;
      if (singleLine || lockedMax || lockedBoth) {
        return dart.notNull(this.preferredLineHeight) * dart.nullCheck(this.maxLines);
      }
      let minLimited = this.minLines != null && dart.nullCheck(this.minLines) > 1;
      let maxLimited = this.maxLines != null;
      if (minLimited || maxLimited) {
        this[_layoutText]({maxWidth: width});
        if (minLimited && dart.notNull(this[_textPainter].height) < dart.notNull(this.preferredLineHeight) * dart.nullCheck(this.minLines)) {
          return dart.notNull(this.preferredLineHeight) * dart.nullCheck(this.minLines);
        }
        if (maxLimited && dart.notNull(this[_textPainter].height) > dart.notNull(this.preferredLineHeight) * dart.nullCheck(this.maxLines)) {
          return dart.notNull(this.preferredLineHeight) * dart.nullCheck(this.maxLines);
        }
      }
      if (width === 1 / 0) {
        let text = this[_plainText];
        let lines = 1;
        for (let index = 0; index < text.length; index = index + 1) {
          if (text[$codeUnitAt](index) === 10) lines = lines + 1;
        }
        return dart.notNull(this.preferredLineHeight) * lines;
      }
      this[_layoutText]({maxWidth: width});
      return math.max(core.double, this.preferredLineHeight, this[_textPainter].height);
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 2850, 43, "width");
      return this[_preferredHeight](width);
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 2855, 43, "width");
      return this[_preferredHeight](width);
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[0], 2860, 55, "baseline");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      return this[_textPainter].computeDistanceToActualBaseline(baseline);
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(I[0], 2866, 27, "position");
      return true;
    }
    hitTestChildren(result, opts) {
      if (result == null) dart.nullFailed(I[0], 2870, 41, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[0], 2870, 67, "position");
      let textPosition = this[_textPainter].getPositionForOffset(position);
      let span = dart.nullCheck(this[_textPainter].text).getSpanForPosition(textPosition);
      if (span != null && hit_test.HitTestTarget.is(span)) {
        result.add(new hit_test.HitTestEntry.new(hit_test.HitTestTarget.as(span)));
        return true;
      }
      return false;
    }
    set [_tap](t44) {
      if (t44 == null) dart.nullFailed(I[0], 2880, 29, "null");
      this[__RenderEditable__tap_isSet] = true;
      this[__RenderEditable__tap] = t44;
    }
    get [_tap]() {
      let t45;
      return dart.test(this[__RenderEditable__tap_isSet]) ? (t45 = this[__RenderEditable__tap], t45) : dart.throw(new _internal.LateError.fieldNI("_tap"));
    }
    set [_longPress](t45) {
      if (t45 == null) dart.nullFailed(I[0], 2881, 35, "null");
      this[__RenderEditable__longPress_isSet] = true;
      this[__RenderEditable__longPress] = t45;
    }
    get [_longPress]() {
      let t46;
      return dart.test(this[__RenderEditable__longPress_isSet]) ? (t46 = this[__RenderEditable__longPress], t46) : dart.throw(new _internal.LateError.fieldNI("_longPress"));
    }
    handleEvent(event, entry) {
      if (event == null) dart.nullFailed(I[0], 2884, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(I[0], 2884, 56, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, I[0], 2885, 12, "debugHandleEvent(event, entry)");
      if (events.PointerDownEvent.is(event)) {
        if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, I[0], 2887, 14, "!debugNeedsLayout");
        if (!dart.test(this.ignorePointer)) {
          this[_tap].addPointer(event);
          this[_longPress].addPointer(event);
        }
      }
    }
    get lastSecondaryTapDownPosition() {
      return this[_lastSecondaryTapDownPosition];
    }
    handleSecondaryTapDown(details) {
      if (details == null) dart.nullFailed(I[0], 2908, 46, "details");
      this[_lastTapDownPosition] = details.globalPosition;
      this[_lastSecondaryTapDownPosition] = details.globalPosition;
    }
    handleTapDown(details) {
      if (details == null) dart.nullFailed(I[0], 2919, 37, "details");
      this[_lastTapDownPosition] = details.globalPosition;
    }
    [_handleTapDown](details) {
      if (details == null) dart.nullFailed(I[0], 2922, 38, "details");
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, I[0], 2923, 12, "!ignorePointer");
      this.handleTapDown(details);
    }
    handleTap() {
      this.selectPosition({cause: text_input.SelectionChangedCause.tap});
    }
    [_handleTap]() {
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, I[0], 2937, 12, "!ignorePointer");
      this.handleTap();
    }
    handleDoubleTap() {
      this.selectWord({cause: text_input.SelectionChangedCause.doubleTap});
    }
    handleLongPress() {
      this.selectWord({cause: text_input.SelectionChangedCause.longPress});
    }
    [_handleLongPress]() {
      if (!!dart.test(this.ignorePointer)) dart.assertFailed(null, I[0], 2961, 12, "!ignorePointer");
      this.handleLongPress();
    }
    selectPosition(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (cause == null) dart.nullFailed(I[0], 2975, 56, "cause");
      this.selectPositionAt({from: dart.nullCheck(this[_lastTapDownPosition]), cause: cause});
    }
    selectPositionAt(opts) {
      let t46, t46$;
      let from = opts && 'from' in opts ? opts.from : null;
      if (from == null) dart.nullFailed(I[0], 2983, 43, "from");
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (cause == null) dart.nullFailed(I[0], 2983, 92, "cause");
      if (!(cause != null)) dart.assertFailed(null, I[0], 2984, 12, "cause != null");
      if (!(from != null)) dart.assertFailed(null, I[0], 2985, 12, "from != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let fromPosition = this[_textPainter].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let toPosition = to == null ? null : this[_textPainter].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset])));
      let baseOffset = fromPosition.offset;
      let extentOffset = (t46$ = (t46 = toPosition, t46 == null ? null : t46.offset), t46$ == null ? fromPosition.offset : t46$);
      let newSelection = new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset, affinity: fromPosition.affinity});
      this[_setSelection](newSelection, cause);
    }
    selectWord(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (cause == null) dart.nullFailed(I[0], 3006, 52, "cause");
      this.selectWordsInRange({from: dart.nullCheck(this[_lastTapDownPosition]), cause: cause});
    }
    selectWordsInRange(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      if (from == null) dart.nullFailed(I[0], 3016, 45, "from");
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (cause == null) dart.nullFailed(I[0], 3016, 94, "cause");
      if (!(cause != null)) dart.assertFailed(null, I[0], 3017, 12, "cause != null");
      if (!(from != null)) dart.assertFailed(null, I[0], 3018, 12, "from != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let firstPosition = this[_textPainter].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let firstWord = this[_getWordAtOffset](firstPosition);
      let lastWord = to == null ? firstWord : this[_getWordAtOffset](this[_textPainter].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset]))));
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: firstWord.base.offset, extentOffset: lastWord.extent.offset, affinity: firstWord.affinity}), cause);
    }
    selectWordEdge(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (cause == null) dart.nullFailed(I[0], 3038, 56, "cause");
      if (!(cause != null)) dart.assertFailed(null, I[0], 3039, 12, "cause != null");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (!(this[_lastTapDownPosition] != null)) dart.assertFailed(null, I[0], 3041, 12, "_lastTapDownPosition != null");
      let position = this[_textPainter].getPositionForOffset(this.globalToLocal(dart.nullCheck(this[_lastTapDownPosition])['-'](this[_paintOffset])));
      let word = this[_textPainter].getWordBoundary(position);
      let newSelection = null;
      let newSelection$35isSet = false;
      function newSelection$35get() {
        return newSelection$35isSet ? newSelection : dart.throw(new _internal.LateError.localNI("newSelection"));
      }
      dart.fn(newSelection$35get, T.VoidToTextSelection());
      function newSelection$35set(t49) {
        if (t49 == null) dart.nullFailed(I[0], 3044, 24, "null");
        newSelection$35isSet = true;
        return newSelection = t49;
      }
      dart.fn(newSelection$35set, T.TextSelectionTodynamic());
      if (dart.notNull(position.offset) - dart.notNull(word.start) <= 1) {
        newSelection$35set(new text_editing.TextSelection.collapsed({offset: word.start, affinity: ui.TextAffinity.downstream}));
      } else {
        newSelection$35set(new text_editing.TextSelection.collapsed({offset: word.end, affinity: ui.TextAffinity.upstream}));
      }
      this[_setSelection](newSelection$35get(), cause);
    }
    [_getWordAtOffset](position) {
      if (position == null) dart.nullFailed(I[0], 3053, 47, "position");
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 3055, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let word = this[_textPainter].getWordBoundary(position);
      if (dart.notNull(position.offset) >= dart.notNull(word.end)) return new text_editing.TextSelection.fromPosition(position);
      if (dart.test(this.obscureText)) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this[_plainText].length});
      } else if (dart.test(editable._isWhitespace(this[_plainText][$codeUnitAt](position.offset))) && dart.notNull(position.offset) > 0) {
        if (!(platform.defaultTargetPlatform != null)) dart.assertFailed(null, I[0], 3075, 14, "defaultTargetPlatform != null");
        let previousWord = this[_getPreviousWord](word.start);
        switch (platform.defaultTargetPlatform) {
          case C[13] || CT.C13:
          {
            if (previousWord == null) {
              let nextWord = this[_getNextWord](word.start);
              if (nextWord == null) {
                return new text_editing.TextSelection.collapsed({offset: position.offset});
              }
              return new text_editing.TextSelection.new({baseOffset: position.offset, extentOffset: nextWord.end});
            }
            return new text_editing.TextSelection.new({baseOffset: previousWord.start, extentOffset: position.offset});
          }
          case C[14] || CT.C14:
          {
            if (dart.test(this.readOnly)) {
              if (previousWord == null) {
                return new text_editing.TextSelection.new({baseOffset: position.offset, extentOffset: dart.notNull(position.offset) + 1});
              }
              return new text_editing.TextSelection.new({baseOffset: previousWord.start, extentOffset: position.offset});
            }
            break;
          }
          case C[15] || CT.C15:
          case C[16] || CT.C16:
          case C[17] || CT.C17:
          case C[18] || CT.C18:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      return new text_editing.TextSelection.new({baseOffset: word.start, extentOffset: word.end});
    }
    [_getLineAtOffset](position) {
      if (position == null) dart.nullFailed(I[0], 3118, 47, "position");
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 3120, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let line = this[_textPainter].getLineBoundary(position);
      if (dart.notNull(position.offset) >= dart.notNull(line.end)) return new text_editing.TextSelection.fromPosition(position);
      if (dart.test(this.obscureText)) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this[_plainText].length});
      }
      return new text_editing.TextSelection.new({baseOffset: line.start, extentOffset: line.end});
    }
    [_layoutText](opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      if (minWidth == null) dart.nullFailed(I[0], 3134, 29, "minWidth");
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (maxWidth == null) dart.nullFailed(I[0], 3134, 52, "maxWidth");
      if (!(maxWidth != null && minWidth != null)) dart.assertFailed(null, I[0], 3135, 12, "maxWidth != null && minWidth != null");
      if (this[_textLayoutLastMaxWidth] == maxWidth && this[_textLayoutLastMinWidth] == minWidth) return;
      let availableMaxWidth = math.max(core.double, 0.0, dart.notNull(maxWidth) - dart.notNull(this[_caretMargin]));
      let availableMinWidth = math.min(core.double, minWidth, availableMaxWidth);
      let textMaxWidth = dart.test(this[_isMultiline]) ? availableMaxWidth : 1 / 0;
      let textMinWidth = dart.test(this.forceLine) ? availableMaxWidth : availableMinWidth;
      this[_textPainter].layout({minWidth: textMinWidth, maxWidth: textMaxWidth});
      this[_textLayoutLastMinWidth] = minWidth;
      this[_textLayoutLastMaxWidth] = maxWidth;
    }
    set [_caretPrototype](t51) {
      if (t51 == null) dart.nullFailed(I[0], 3150, 13, "null");
      this[__RenderEditable__caretPrototype_isSet] = true;
      this[__RenderEditable__caretPrototype] = t51;
    }
    get [_caretPrototype]() {
      let t52;
      return dart.test(this[__RenderEditable__caretPrototype_isSet]) ? (t52 = this[__RenderEditable__caretPrototype], t52) : dart.throw(new _internal.LateError.fieldNI("_caretPrototype"));
    }
    [_computeCaretPrototype]() {
      if (!(platform.defaultTargetPlatform != null)) dart.assertFailed(null, I[0], 3164, 12, "defaultTargetPlatform != null");
      switch (platform.defaultTargetPlatform) {
        case C[13] || CT.C13:
        case C[16] || CT.C16:
        {
          this[_caretPrototype] = new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, dart.notNull(this.cursorHeight) + 2);
          break;
        }
        case C[14] || CT.C14:
        case C[15] || CT.C15:
        case C[17] || CT.C17:
        case C[18] || CT.C18:
        {
          this[_caretPrototype] = new ui.Rect.fromLTWH(0.0, 2, this.cursorWidth, dart.notNull(this.cursorHeight) - 2.0 * 2);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [_snapToPhysicalPixel](sourceOffset) {
      if (sourceOffset == null) dart.nullFailed(I[0], 3181, 38, "sourceOffset");
      let globalOffset = this.localToGlobal(sourceOffset);
      let pixelMultiple = 1.0 / dart.notNull(this[_devicePixelRatio]);
      return new ui.Offset.new(globalOffset.dx[$isFinite] ? (dart.notNull(globalOffset.dx) / pixelMultiple)[$round]() * pixelMultiple - dart.notNull(globalOffset.dx) : 0.0, globalOffset.dy[$isFinite] ? (dart.notNull(globalOffset.dy) / pixelMultiple)[$round]() * pixelMultiple - dart.notNull(globalOffset.dy) : 0.0);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 3195, 40, "constraints");
      this[_layoutText]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
      let width = dart.test(this.forceLine) ? constraints.maxWidth : constraints.constrainWidth(dart.notNull(this[_textPainter].size.width) + dart.notNull(this[_caretMargin]));
      return new ui.Size.new(width, constraints.constrainHeight(this[_preferredHeight](constraints.maxWidth)));
    }
    performLayout() {
      let t52, t52$;
      let constraints = this.constraints;
      this[_layoutText]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
      this[_computeCaretPrototype]();
      let textPainterSize = this[_textPainter].size;
      let width = dart.test(this.forceLine) ? constraints.maxWidth : constraints.constrainWidth(dart.notNull(this[_textPainter].size.width) + dart.notNull(this[_caretMargin]));
      this.size = new ui.Size.new(width, constraints.constrainHeight(this[_preferredHeight](constraints.maxWidth)));
      let contentSize = new ui.Size.new(dart.notNull(textPainterSize.width) + dart.notNull(this[_caretMargin]), textPainterSize.height);
      let painterConstraints = new box.BoxConstraints.tight(contentSize);
      t52 = this[_foregroundRenderObject];
      t52 == null ? null : t52.layout(painterConstraints);
      t52$ = this[_backgroundRenderObject];
      t52$ == null ? null : t52$.layout(painterConstraints);
      this[_maxScrollExtent] = this[_getMaxScrollExtent](contentSize);
      this.offset.applyViewportDimension(this[_viewportExtent]);
      this.offset.applyContentDimensions(0.0, this[_maxScrollExtent]);
    }
    calculateBoundedFloatingCursorOffset(rawCursorOffset) {
      if (rawCursorOffset == null) dart.nullFailed(I[0], 3243, 54, "rawCursorOffset");
      let deltaPosition = ui.Offset.zero;
      let topBound = -dart.notNull(this.floatingCursorAddedMargin.top);
      let bottomBound = dart.notNull(this[_textPainter].height) - dart.notNull(this.preferredLineHeight) + dart.notNull(this.floatingCursorAddedMargin.bottom);
      let leftBound = -dart.notNull(this.floatingCursorAddedMargin.left);
      let rightBound = dart.notNull(this[_textPainter].width) + dart.notNull(this.floatingCursorAddedMargin.right);
      if (this[_previousOffset] != null) deltaPosition = rawCursorOffset['-'](dart.nullCheck(this[_previousOffset]));
      if (dart.test(this[_resetOriginOnLeft]) && dart.notNull(deltaPosition.dx) > 0) {
        this[_relativeOrigin] = new ui.Offset.new(dart.notNull(rawCursorOffset.dx) - leftBound, this[_relativeOrigin].dy);
        this[_resetOriginOnLeft] = false;
      } else if (dart.test(this[_resetOriginOnRight]) && dart.notNull(deltaPosition.dx) < 0) {
        this[_relativeOrigin] = new ui.Offset.new(dart.notNull(rawCursorOffset.dx) - rightBound, this[_relativeOrigin].dy);
        this[_resetOriginOnRight] = false;
      }
      if (dart.test(this[_resetOriginOnTop]) && dart.notNull(deltaPosition.dy) > 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, dart.notNull(rawCursorOffset.dy) - topBound);
        this[_resetOriginOnTop] = false;
      } else if (dart.test(this[_resetOriginOnBottom]) && dart.notNull(deltaPosition.dy) < 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, dart.notNull(rawCursorOffset.dy) - bottomBound);
        this[_resetOriginOnBottom] = false;
      }
      let currentX = dart.notNull(rawCursorOffset.dx) - dart.notNull(this[_relativeOrigin].dx);
      let currentY = dart.notNull(rawCursorOffset.dy) - dart.notNull(this[_relativeOrigin].dy);
      let adjustedX = math.min(core.double, math.max(core.double, currentX, leftBound), rightBound);
      let adjustedY = math.min(core.double, math.max(core.double, currentY, topBound), bottomBound);
      let adjustedOffset = new ui.Offset.new(adjustedX, adjustedY);
      if (currentX < leftBound && dart.notNull(deltaPosition.dx) < 0)
        this[_resetOriginOnLeft] = true;
      else if (currentX > rightBound && dart.notNull(deltaPosition.dx) > 0) this[_resetOriginOnRight] = true;
      if (currentY < topBound && dart.notNull(deltaPosition.dy) < 0)
        this[_resetOriginOnTop] = true;
      else if (currentY > bottomBound && dart.notNull(deltaPosition.dy) > 0) this[_resetOriginOnBottom] = true;
      this[_previousOffset] = rawCursorOffset;
      return adjustedOffset;
    }
    setFloatingCursor(state, boundedOffset, lastTextPosition, opts) {
      if (state == null) dart.nullFailed(I[0], 3292, 50, "state");
      if (boundedOffset == null) dart.nullFailed(I[0], 3292, 64, "boundedOffset");
      if (lastTextPosition == null) dart.nullFailed(I[0], 3292, 92, "lastTextPosition");
      let resetLerpValue = opts && 'resetLerpValue' in opts ? opts.resetLerpValue : null;
      if (!(state != null)) dart.assertFailed(null, I[0], 3293, 12, "state != null");
      if (!(boundedOffset != null)) dart.assertFailed(null, I[0], 3294, 12, "boundedOffset != null");
      if (!(lastTextPosition != null)) dart.assertFailed(null, I[0], 3295, 12, "lastTextPosition != null");
      if (state == text_input.FloatingCursorDragState.Start) {
        this[_relativeOrigin] = ui.Offset.zero;
        this[_previousOffset] = null;
        this[_resetOriginOnBottom] = false;
        this[_resetOriginOnTop] = false;
        this[_resetOriginOnRight] = false;
        this[_resetOriginOnBottom] = false;
      }
      this[_floatingCursorOn] = state != text_input.FloatingCursorDragState.End;
      this[_resetFloatingCursorAnimationValue] = resetLerpValue;
      if (dart.test(this[_floatingCursorOn])) {
        this[_floatingCursorTextPosition] = lastTextPosition;
        let animationValue = this[_resetFloatingCursorAnimationValue];
        let sizeAdjustment = animationValue != null ? dart.nullCheck(edge_insets.EdgeInsets.lerp(editable._kFloatingCaretSizeIncrease, edge_insets.EdgeInsets.zero, animationValue)) : editable._kFloatingCaretSizeIncrease;
        this[_caretPainter].floatingCursorRect = sizeAdjustment.inflateRect(this[_caretPrototype]).shift(boundedOffset);
      } else {
        this[_caretPainter].floatingCursorRect = null;
      }
      this[_caretPainter].showRegularCaret = this[_resetFloatingCursorAnimationValue] == null;
    }
    [_paintContents](context, offset) {
      if (context == null) dart.nullFailed(I[0], 3319, 39, "context");
      if (offset == null) dart.nullFailed(I[0], 3319, 55, "offset");
      if (!(this[_textLayoutLastMaxWidth] == this.constraints.maxWidth && this[_textLayoutLastMinWidth] == this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[0], 3321, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
      let effectiveOffset = offset['+'](this[_paintOffset]);
      if (this.selection != null && !dart.test(this[_floatingCursorOn])) {
        this[_updateSelectionExtentsVisibility](effectiveOffset);
      }
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (backgroundChild != null) context.paintChild(backgroundChild, offset);
      this[_textPainter].paint(context.canvas, effectiveOffset);
      if (foregroundChild != null) context.paintChild(foregroundChild, offset);
    }
    [_paintHandleLayers](context, endpoints) {
      if (context == null) dart.nullFailed(I[0], 3345, 43, "context");
      if (endpoints == null) dart.nullFailed(I[0], 3345, 77, "endpoints");
      let startPoint = endpoints[$_get](0).point;
      startPoint = new ui.Offset.new(startPoint.dx[$clamp](0.0, this.size.width), startPoint.dy[$clamp](0.0, this.size.height));
      context.pushLayer(new layer.LeaderLayer.new({link: this.startHandleLayerLink, offset: startPoint}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      if (endpoints[$length] === 2) {
        let endPoint = endpoints[$_get](1).point;
        endPoint = new ui.Offset.new(endPoint.dx[$clamp](0.0, this.size.width), endPoint.dy[$clamp](0.0, this.size.height));
        context.pushLayer(new layer.LeaderLayer.new({link: this.endHandleLayerLink, offset: endPoint}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 3371, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 3371, 46, "offset");
      this[_layoutText]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      if (dart.test(this[_hasVisualOverflow]) && this.clipBehavior != ui.Clip.none) {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintContents), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      } else {
        this[_clipRectLayer] = null;
        this[_paintContents](context, offset);
      }
      this[_paintHandleLayers](context, this.getEndpointsForSelection(dart.nullCheck(this.selection)));
    }
    describeApproximatePaintClip(child) {
      object.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[0], 3392, 51, "child");
      return dart.test(this[_hasVisualOverflow]) ? ui.Offset.zero['&'](this.size) : null;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 3395, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new colors.ColorProperty.new("cursorColor", this.cursorColor));
      properties.add(new (T.DiagnosticsPropertyOfValueNotifierOfbool()).new("showCursor", this.showCursor));
      properties.add(new diagnostics.IntProperty.new("maxLines", this.maxLines));
      properties.add(new diagnostics.IntProperty.new("minLines", this.minLines));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("expands", this.expands, {defaultValue: false}));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor));
      properties.add(new diagnostics.DoubleProperty.new("textScaleFactor", this.textScaleFactor));
      properties.add(new (T.DiagnosticsPropertyOfLocale()).new("locale", this.locale, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (T.DiagnosticsPropertyOfViewportOffset()).new("offset", this.offset));
    }
    debugDescribeChildren() {
      return (() => {
        let t52 = T.JSArrayOfDiagnosticsNode().of([]);
        if (this.text != null) t52[$add](dart.nullCheck(this.text).toDiagnosticsNode({name: "text", style: diagnostics.DiagnosticsTreeStyle.transition}));
        return t52;
      })();
    }
  };
  (editable.RenderEditable.new = function(opts) {
    let t0, t0$;
    let text = opts && 'text' in opts ? opts.text : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[0], 156, 28, "textDirection");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[2] || CT.C2;
    if (textAlign == null) dart.nullFailed(I[0], 157, 15, "textAlign");
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let backgroundCursorColor = opts && 'backgroundCursorColor' in opts ? opts.backgroundCursorColor : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
    if (startHandleLayerLink == null) dart.nullFailed(I[0], 162, 24, "startHandleLayerLink");
    let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
    if (endHandleLayerLink == null) dart.nullFailed(I[0], 163, 24, "endHandleLayerLink");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    if (expands == null) dart.nullFailed(I[0], 166, 10, "expands");
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    if (textScaleFactor == null) dart.nullFailed(I[0], 169, 12, "textScaleFactor");
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    if (offset == null) dart.nullFailed(I[0], 171, 29, "offset");
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let onCaretChanged = opts && 'onCaretChanged' in opts ? opts.onCaretChanged : null;
    let ignorePointer = opts && 'ignorePointer' in opts ? opts.ignorePointer : false;
    if (ignorePointer == null) dart.nullFailed(I[0], 178, 10, "ignorePointer");
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    if (readOnly == null) dart.nullFailed(I[0], 179, 10, "readOnly");
    let forceLine = opts && 'forceLine' in opts ? opts.forceLine : true;
    if (forceLine == null) dart.nullFailed(I[0], 180, 10, "forceLine");
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[3] || CT.C3;
    if (textWidthBasis == null) dart.nullFailed(I[0], 182, 20, "textWidthBasis");
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    if (obscuringCharacter == null) dart.nullFailed(I[0], 183, 12, "obscuringCharacter");
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    if (obscureText == null) dart.nullFailed(I[0], 184, 10, "obscureText");
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 1;
    if (cursorWidth == null) dart.nullFailed(I[0], 186, 12, "cursorWidth");
    let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let paintCursorAboveText = opts && 'paintCursorAboveText' in opts ? opts.paintCursorAboveText : false;
    if (paintCursorAboveText == null) dart.nullFailed(I[0], 189, 10, "paintCursorAboveText");
    let cursorOffset = opts && 'cursorOffset' in opts ? opts.cursorOffset : C[4] || CT.C4;
    if (cursorOffset == null) dart.nullFailed(I[0], 190, 12, "cursorOffset");
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 1;
    if (devicePixelRatio == null) dart.nullFailed(I[0], 191, 12, "devicePixelRatio");
    let selectionHeightStyle = opts && 'selectionHeightStyle' in opts ? opts.selectionHeightStyle : C[5] || CT.C5;
    if (selectionHeightStyle == null) dart.nullFailed(I[0], 192, 23, "selectionHeightStyle");
    let selectionWidthStyle = opts && 'selectionWidthStyle' in opts ? opts.selectionWidthStyle : C[6] || CT.C6;
    if (selectionWidthStyle == null) dart.nullFailed(I[0], 193, 22, "selectionWidthStyle");
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
    let floatingCursorAddedMargin = opts && 'floatingCursorAddedMargin' in opts ? opts.floatingCursorAddedMargin : C[7] || CT.C7;
    if (floatingCursorAddedMargin == null) dart.nullFailed(I[0], 195, 10, "floatingCursorAddedMargin");
    let promptRectRange = opts && 'promptRectRange' in opts ? opts.promptRectRange : null;
    let promptRectColor = opts && 'promptRectColor' in opts ? opts.promptRectColor : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[8] || CT.C8;
    if (clipBehavior == null) dart.nullFailed(I[0], 198, 10, "clipBehavior");
    let textSelectionDelegate = opts && 'textSelectionDelegate' in opts ? opts.textSelectionDelegate : null;
    if (textSelectionDelegate == null) dart.nullFailed(I[0], 199, 19, "textSelectionDelegate");
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    this[_foregroundRenderObject] = null;
    this[_backgroundRenderObject] = null;
    this[_foregroundPainter] = null;
    this[_painter] = null;
    this[__RenderEditable__caretPainter] = null;
    this[__RenderEditable__caretPainter_isSet] = false;
    this[_selectionPainter] = new editable._TextHighlightPainter.new();
    this[_autocorrectHighlightPainter] = new editable._TextHighlightPainter.new();
    this[_cachedBuiltInForegroundPainters] = null;
    this[_cachedBuiltInPainters] = null;
    this[_textLayoutLastMaxWidth] = null;
    this[_textLayoutLastMinWidth] = null;
    this[_lastCaretRect] = null;
    this[_selectionStartInViewport] = new (T.ValueNotifierOfbool()).new(true);
    this[_selectionEndInViewport] = new (T.ValueNotifierOfbool()).new(true);
    this[_cursorResetLocation] = -1;
    this[_wasSelectingVerticallyWithKeyboard] = false;
    this[_cachedPlainText] = null;
    this[_hasFocus] = false;
    this[_listenerAttached] = false;
    this[_forceLine] = false;
    this[_readOnly] = false;
    this[_cursorWidth] = 1.0;
    this[_floatingCursorOn] = false;
    this[__RenderEditable__floatingCursorTextPosition] = null;
    this[__RenderEditable__floatingCursorTextPosition_isSet] = false;
    this[_maxScrollExtent] = 0.0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_semanticsInfo] = null;
    this[_cachedChildNodes] = null;
    this[__RenderEditable__tap] = null;
    this[__RenderEditable__tap_isSet] = false;
    this[__RenderEditable__longPress] = null;
    this[__RenderEditable__longPress_isSet] = false;
    this[_lastTapDownPosition] = null;
    this[_lastSecondaryTapDownPosition] = null;
    this[__RenderEditable__caretPrototype] = null;
    this[__RenderEditable__caretPrototype_isSet] = false;
    this[_relativeOrigin] = ui.Offset.zero;
    this[_previousOffset] = null;
    this[_resetOriginOnLeft] = false;
    this[_resetOriginOnRight] = false;
    this[_resetOriginOnTop] = false;
    this[_resetOriginOnBottom] = false;
    this[_resetFloatingCursorAnimationValue] = null;
    this[_clipRectLayer] = null;
    this[onSelectionChanged$] = onSelectionChanged;
    this[onCaretChanged$] = onCaretChanged;
    this[ignorePointer$] = ignorePointer;
    this[floatingCursorAddedMargin$] = floatingCursorAddedMargin;
    this[textSelectionDelegate$] = textSelectionDelegate;
    if (!(textAlign != null)) dart.assertFailed(null, I[0], 202, 15, "textAlign != null");
    if (!(textDirection != null)) dart.assertFailed("RenderEditable created without a textDirection.", I[0], 203, 15, "textDirection != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[0], 204, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, I[0], 205, 15, "minLines == null || minLines > 0");
    if (!(startHandleLayerLink != null)) dart.assertFailed(null, I[0], 206, 15, "startHandleLayerLink != null");
    if (!(endHandleLayerLink != null)) dart.assertFailed(null, I[0], 207, 15, "endHandleLayerLink != null");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", I[0], 209, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands != null)) dart.assertFailed(null, I[0], 212, 15, "expands != null");
    if (!(!dart.test(expands) || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", I[0], 214, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(textScaleFactor != null)) dart.assertFailed(null, I[0], 217, 15, "textScaleFactor != null");
    if (!(offset != null)) dart.assertFailed(null, I[0], 218, 15, "offset != null");
    if (!(ignorePointer != null)) dart.assertFailed(null, I[0], 219, 15, "ignorePointer != null");
    if (!(textWidthBasis != null)) dart.assertFailed(null, I[0], 220, 15, "textWidthBasis != null");
    if (!(paintCursorAboveText != null)) dart.assertFailed(null, I[0], 221, 15, "paintCursorAboveText != null");
    if (!(obscuringCharacter != null && extensions['StringCharacters|get#characters'](obscuringCharacter)[$length] === 1)) dart.assertFailed(null, I[0], 222, 15, "obscuringCharacter != null && obscuringCharacter.characters.length == 1");
    if (!(obscureText != null)) dart.assertFailed(null, I[0], 223, 15, "obscureText != null");
    if (!(textSelectionDelegate != null)) dart.assertFailed(null, I[0], 224, 15, "textSelectionDelegate != null");
    if (!(cursorWidth != null && dart.notNull(cursorWidth) >= 0.0)) dart.assertFailed(null, I[0], 225, 15, "cursorWidth != null && cursorWidth >= 0.0");
    if (!(cursorHeight == null || dart.notNull(cursorHeight) >= 0.0)) dart.assertFailed(null, I[0], 226, 15, "cursorHeight == null || cursorHeight >= 0.0");
    if (!(readOnly != null)) dart.assertFailed(null, I[0], 227, 15, "readOnly != null");
    if (!(forceLine != null)) dart.assertFailed(null, I[0], 228, 15, "forceLine != null");
    if (!(devicePixelRatio != null)) dart.assertFailed(null, I[0], 229, 15, "devicePixelRatio != null");
    if (!(selectionHeightStyle != null)) dart.assertFailed(null, I[0], 230, 15, "selectionHeightStyle != null");
    if (!(selectionWidthStyle != null)) dart.assertFailed(null, I[0], 231, 15, "selectionWidthStyle != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[0], 232, 15, "clipBehavior != null");
    this[_textPainter] = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, locale: locale, strutStyle: strutStyle, textHeightBehavior: textHeightBehavior, textWidthBasis: textWidthBasis});
    this[_showCursor] = (t0 = showCursor, t0 == null ? new (T.ValueNotifierOfbool()).new(false) : t0);
    this[_maxLines] = maxLines;
    this[_minLines] = minLines;
    this[_expands] = expands;
    this[_selection] = selection;
    this[_offset] = offset;
    this[_cursorWidth] = cursorWidth;
    this[_cursorHeight] = cursorHeight;
    this[_paintCursorOnTop] = paintCursorAboveText;
    this[_enableInteractiveSelection] = enableInteractiveSelection;
    this[_devicePixelRatio] = devicePixelRatio;
    this[_startHandleLayerLink] = startHandleLayerLink;
    this[_endHandleLayerLink] = endHandleLayerLink;
    this[_obscuringCharacter] = obscuringCharacter;
    this[_obscureText] = obscureText;
    this[_readOnly] = readOnly;
    this[_forceLine] = forceLine;
    this[_clipBehavior] = clipBehavior;
    this[_hasFocus] = (t0$ = hasFocus, t0$ == null ? false : t0$);
    editable.RenderEditable.__proto__.new.call(this);
    if (!(this[_showCursor] != null)) dart.assertFailed(null, I[0], 262, 12, "_showCursor != null");
    if (!(!dart.test(this[_showCursor].value) || cursorColor != null)) dart.assertFailed(null, I[0], 263, 12, "!_showCursor.value || cursorColor != null");
    this[_selectionPainter].highlightColor = selectionColor;
    this[_selectionPainter].highlightedRange = selection;
    this[_selectionPainter].selectionHeightStyle = selectionHeightStyle;
    this[_selectionPainter].selectionWidthStyle = selectionWidthStyle;
    this[_autocorrectHighlightPainter].highlightColor = promptRectColor;
    this[_autocorrectHighlightPainter].highlightedRange = promptRectRange;
    this[_caretPainter].caretColor = cursorColor;
    this[_caretPainter].cursorRadius = cursorRadius;
    this[_caretPainter].cursorOffset = cursorOffset;
    this[_caretPainter].backgroundCursorColor = backgroundCursorColor;
    this[_updateForegroundPainter](foregroundPainter);
    this[_updatePainter](painter);
  }).prototype = editable.RenderEditable.prototype;
  dart.addTypeTests(editable.RenderEditable);
  dart.addTypeCaches(editable.RenderEditable);
  dart.setMethodSignature(editable.RenderEditable, () => ({
    __proto__: dart.getMethods(editable.RenderEditable.__proto__),
    [_updateForegroundPainter]: dart.fnType(dart.void, [dart.nullable(editable.RenderEditablePainter)]),
    [_updatePainter]: dart.fnType(dart.void, [dart.nullable(editable.RenderEditablePainter)]),
    [_createBuiltInForegroundPainters]: dart.fnType(editable._CompositeRenderEditablePainter, []),
    [_createBuiltInPainters]: dart.fnType(editable._CompositeRenderEditablePainter, []),
    [_onCaretChanged]: dart.fnType(dart.void, [ui.Rect]),
    [_updateSelectionExtentsVisibility]: dart.fnType(dart.void, [ui.Offset]),
    [_setTextEditingValue]: dart.fnType(dart.void, [text_input.TextEditingValue, text_input.SelectionChangedCause]),
    [_setSelection]: dart.fnType(dart.void, [text_editing.TextSelection, text_input.SelectionChangedCause]),
    [_handleSelectionChange]: dart.fnType(dart.void, [text_editing.TextSelection, text_input.SelectionChangedCause]),
    [_handleKeyEvent]: dart.fnType(dart.void, [raw_keyboard.RawKeyEvent]),
    [_extendSelectionToEnd]: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    [_extendSelectionToStart]: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    [_getTextPositionVertical]: dart.fnType(ui.TextPosition, [core.int, core.double]),
    [_getTextPositionAbove]: dart.fnType(ui.TextPosition, [core.int]),
    [_getTextPositionBelow]: dart.fnType(ui.TextPosition, [core.int]),
    extendSelectionDown: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    expandSelectionToEnd: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionLeft: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionLeftByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionRight: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionRightByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionUp: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    expandSelectionToStart: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    expandSelectionLeftByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    extendSelectionLeftByWord: dart.fnType(dart.void, [text_input.SelectionChangedCause], [core.bool, core.bool]),
    extendSelectionRightByWord: dart.fnType(dart.void, [text_input.SelectionChangedCause], [core.bool, core.bool]),
    expandSelectionRightByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionDown: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionLeft: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionLeftByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionLeftByWord: dart.fnType(dart.void, [text_input.SelectionChangedCause], [core.bool]),
    moveSelectionRight: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionRightByLine: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionRightByWord: dart.fnType(dart.void, [text_input.SelectionChangedCause], [core.bool]),
    moveSelectionToEnd: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionToStart: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    moveSelectionUp: dart.fnType(dart.void, [text_input.SelectionChangedCause]),
    [_handleShortcuts]: dart.fnType(async.Future$(dart.void), [keyboard_key.LogicalKeyboardKey]),
    [_handleDelete]: dart.fnType(dart.void, [], {}, {forward: core.bool}),
    markNeedsTextLayout: dart.fnType(dart.void, []),
    [_showHideCursor]: dart.fnType(dart.void, []),
    setPromptRectRange: dart.fnType(dart.void, [dart.nullable(ui.TextRange)]),
    [_handleSetText]: dart.fnType(dart.void, [core.String]),
    [_handleSetSelection]: dart.fnType(dart.void, [text_editing.TextSelection]),
    [_handleMoveCursorForwardByCharacter]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorBackwardByCharacter]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorForwardByWord]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorBackwardByWord]: dart.fnType(dart.void, [core.bool]),
    [_getNextWord]: dart.fnType(dart.nullable(ui.TextRange), [core.int]),
    [_getPreviousWord]: dart.fnType(dart.nullable(ui.TextRange), [core.int]),
    [_onlyWhitespace]: dart.fnType(core.bool, [ui.TextRange]),
    [_getMaxScrollExtent]: dart.fnType(core.double, [ui.Size]),
    getEndpointsForSelection: dart.fnType(core.List$(editable.TextSelectionPoint), [text_editing.TextSelection]),
    getRectForComposingRange: dart.fnType(dart.nullable(ui.Rect), [ui.TextRange]),
    getPositionForPoint: dart.fnType(ui.TextPosition, [ui.Offset]),
    getLocalRectForCaret: dart.fnType(ui.Rect, [ui.TextPosition]),
    [_preferredHeight]: dart.fnType(core.double, [core.double]),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    handleSecondaryTapDown: dart.fnType(dart.void, [tap.TapDownDetails]),
    handleTapDown: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    handleTap: dart.fnType(dart.void, []),
    [_handleTap]: dart.fnType(dart.void, []),
    handleDoubleTap: dart.fnType(dart.void, []),
    handleLongPress: dart.fnType(dart.void, []),
    [_handleLongPress]: dart.fnType(dart.void, []),
    selectPosition: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    selectPositionAt: dart.fnType(dart.void, [], {to: dart.nullable(ui.Offset)}, {cause: text_input.SelectionChangedCause, from: ui.Offset}),
    selectWord: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    selectWordsInRange: dart.fnType(dart.void, [], {to: dart.nullable(ui.Offset)}, {cause: text_input.SelectionChangedCause, from: ui.Offset}),
    selectWordEdge: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    [_getWordAtOffset]: dart.fnType(text_editing.TextSelection, [ui.TextPosition]),
    [_getLineAtOffset]: dart.fnType(text_editing.TextSelection, [ui.TextPosition]),
    [_layoutText]: dart.fnType(dart.void, [], {maxWidth: core.double, minWidth: core.double}, {}),
    [_computeCaretPrototype]: dart.fnType(dart.void, []),
    [_snapToPhysicalPixel]: dart.fnType(ui.Offset, [ui.Offset]),
    calculateBoundedFloatingCursorOffset: dart.fnType(ui.Offset, [ui.Offset]),
    setFloatingCursor: dart.fnType(dart.void, [text_input.FloatingCursorDragState, ui.Offset, ui.TextPosition], {resetLerpValue: dart.nullable(core.double)}, {}),
    [_paintContents]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    [_paintHandleLayers]: dart.fnType(dart.void, [object.PaintingContext, core.List$(editable.TextSelectionPoint)])
  }));
  dart.setGetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getGetters(editable.RenderEditable.__proto__),
    foregroundPainter: dart.nullable(editable.RenderEditablePainter),
    painter: dart.nullable(editable.RenderEditablePainter),
    [_caretPainter]: editable._FloatingCursorPainter,
    [_builtInForegroundPainters]: editable._CompositeRenderEditablePainter,
    [_builtInPainters]: editable._CompositeRenderEditablePainter,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    textWidthBasis: text_painter.TextWidthBasis,
    devicePixelRatio: core.double,
    obscuringCharacter: core.String,
    obscureText: core.bool,
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle,
    selectionStartInViewport: change_notifier.ValueListenable$(core.bool),
    selectionEndInViewport: change_notifier.ValueListenable$(core.bool),
    [_plainText]: core.String,
    text: dart.nullable(text_span.TextSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    cursorColor: dart.nullable(ui.Color),
    backgroundCursorColor: dart.nullable(ui.Color),
    showCursor: change_notifier.ValueNotifier$(core.bool),
    hasFocus: core.bool,
    forceLine: core.bool,
    readOnly: core.bool,
    maxLines: dart.nullable(core.int),
    minLines: dart.nullable(core.int),
    expands: core.bool,
    selectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    selection: dart.nullable(text_editing.TextSelection),
    offset: viewport_offset.ViewportOffset,
    cursorWidth: core.double,
    cursorHeight: core.double,
    paintCursorAboveText: core.bool,
    cursorOffset: ui.Offset,
    cursorRadius: dart.nullable(ui.Radius),
    startHandleLayerLink: layer.LayerLink,
    endHandleLayerLink: layer.LayerLink,
    [_floatingCursorTextPosition]: ui.TextPosition,
    enableInteractiveSelection: dart.nullable(core.bool),
    selectionEnabled: core.bool,
    promptRectColor: dart.nullable(ui.Color),
    maxScrollExtent: core.double,
    [_caretMargin]: core.double,
    clipBehavior: ui.Clip,
    [_isMultiline]: core.bool,
    [_viewportAxis]: basic_types.Axis,
    [_paintOffset]: ui.Offset,
    [_viewportExtent]: core.double,
    [_hasVisualOverflow]: core.bool,
    preferredLineHeight: core.double,
    [_tap]: tap.TapGestureRecognizer,
    [_longPress]: long_press.LongPressGestureRecognizer,
    lastSecondaryTapDownPosition: dart.nullable(ui.Offset),
    [_caretPrototype]: ui.Rect
  }));
  dart.setSetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getSetters(editable.RenderEditable.__proto__),
    foregroundPainter: dart.nullable(editable.RenderEditablePainter),
    painter: dart.nullable(editable.RenderEditablePainter),
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    textWidthBasis: text_painter.TextWidthBasis,
    devicePixelRatio: core.double,
    obscuringCharacter: core.String,
    obscureText: core.bool,
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle,
    text: dart.nullable(text_span.TextSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    cursorColor: dart.nullable(ui.Color),
    backgroundCursorColor: dart.nullable(ui.Color),
    showCursor: change_notifier.ValueNotifier$(core.bool),
    hasFocus: core.bool,
    forceLine: core.bool,
    readOnly: core.bool,
    maxLines: dart.nullable(core.int),
    minLines: dart.nullable(core.int),
    expands: core.bool,
    selectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    selection: dart.nullable(text_editing.TextSelection),
    offset: viewport_offset.ViewportOffset,
    cursorWidth: core.double,
    cursorHeight: dart.nullable(core.double),
    paintCursorAboveText: core.bool,
    cursorOffset: ui.Offset,
    cursorRadius: dart.nullable(ui.Radius),
    startHandleLayerLink: layer.LayerLink,
    endHandleLayerLink: layer.LayerLink,
    [_floatingCursorTextPosition]: ui.TextPosition,
    enableInteractiveSelection: dart.nullable(core.bool),
    promptRectColor: dart.nullable(ui.Color),
    clipBehavior: ui.Clip,
    [_tap]: tap.TapGestureRecognizer,
    [_longPress]: long_press.LongPressGestureRecognizer,
    [_caretPrototype]: ui.Rect
  }));
  dart.setLibraryUri(editable.RenderEditable, I[1]);
  dart.setFieldSignature(editable.RenderEditable, () => ({
    __proto__: dart.getFields(editable.RenderEditable.__proto__),
    [_foregroundRenderObject]: dart.fieldType(dart.nullable(editable._RenderEditableCustomPaint)),
    [_backgroundRenderObject]: dart.fieldType(dart.nullable(editable._RenderEditableCustomPaint)),
    [_foregroundPainter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter)),
    [_painter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter)),
    [__RenderEditable__caretPainter]: dart.fieldType(dart.nullable(editable._FloatingCursorPainter)),
    [__RenderEditable__caretPainter_isSet]: dart.fieldType(core.bool),
    [_selectionPainter]: dart.finalFieldType(editable._TextHighlightPainter),
    [_autocorrectHighlightPainter]: dart.finalFieldType(editable._TextHighlightPainter),
    [_cachedBuiltInForegroundPainters]: dart.fieldType(dart.nullable(editable._CompositeRenderEditablePainter)),
    [_cachedBuiltInPainters]: dart.fieldType(dart.nullable(editable._CompositeRenderEditablePainter)),
    onSelectionChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [text_editing.TextSelection, editable.RenderEditable, text_input.SelectionChangedCause]))),
    [_textLayoutLastMaxWidth]: dart.fieldType(dart.nullable(core.double)),
    [_textLayoutLastMinWidth]: dart.fieldType(dart.nullable(core.double)),
    [_lastCaretRect]: dart.fieldType(dart.nullable(ui.Rect)),
    onCaretChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [ui.Rect]))),
    ignorePointer: dart.fieldType(core.bool),
    [_devicePixelRatio]: dart.fieldType(core.double),
    [_obscuringCharacter]: dart.fieldType(core.String),
    [_obscureText]: dart.fieldType(core.bool),
    textSelectionDelegate: dart.fieldType(text_input.TextSelectionDelegate),
    [_selectionStartInViewport]: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [_selectionEndInViewport]: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [_cursorResetLocation]: dart.fieldType(core.int),
    [_wasSelectingVerticallyWithKeyboard]: dart.fieldType(core.bool),
    [_cachedPlainText]: dart.fieldType(dart.nullable(core.String)),
    [_textPainter]: dart.finalFieldType(text_painter.TextPainter),
    [_showCursor]: dart.fieldType(change_notifier.ValueNotifier$(core.bool)),
    [_hasFocus]: dart.fieldType(core.bool),
    [_listenerAttached]: dart.fieldType(core.bool),
    [_forceLine]: dart.fieldType(core.bool),
    [_readOnly]: dart.fieldType(core.bool),
    [_maxLines]: dart.fieldType(dart.nullable(core.int)),
    [_minLines]: dart.fieldType(dart.nullable(core.int)),
    [_expands]: dart.fieldType(core.bool),
    [_selection]: dart.fieldType(dart.nullable(text_editing.TextSelection)),
    [_offset]: dart.fieldType(viewport_offset.ViewportOffset),
    [_cursorWidth]: dart.fieldType(core.double),
    [_cursorHeight]: dart.fieldType(dart.nullable(core.double)),
    [_paintCursorOnTop]: dart.fieldType(core.bool),
    [_startHandleLayerLink]: dart.fieldType(layer.LayerLink),
    [_endHandleLayerLink]: dart.fieldType(layer.LayerLink),
    floatingCursorAddedMargin: dart.fieldType(edge_insets.EdgeInsets),
    [_floatingCursorOn]: dart.fieldType(core.bool),
    [__RenderEditable__floatingCursorTextPosition]: dart.fieldType(dart.nullable(ui.TextPosition)),
    [__RenderEditable__floatingCursorTextPosition_isSet]: dart.fieldType(core.bool),
    [_enableInteractiveSelection]: dart.fieldType(dart.nullable(core.bool)),
    [_maxScrollExtent]: dart.fieldType(core.double),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_semanticsInfo]: dart.fieldType(dart.nullable(core.List$(inline_span.InlineSpanSemanticsInformation))),
    [_cachedChildNodes]: dart.fieldType(dart.nullable(collection.Queue$(semantics.SemanticsNode))),
    [__RenderEditable__tap]: dart.fieldType(dart.nullable(tap.TapGestureRecognizer)),
    [__RenderEditable__tap_isSet]: dart.fieldType(core.bool),
    [__RenderEditable__longPress]: dart.fieldType(dart.nullable(long_press.LongPressGestureRecognizer)),
    [__RenderEditable__longPress_isSet]: dart.fieldType(core.bool),
    [_lastTapDownPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [_lastSecondaryTapDownPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [__RenderEditable__caretPrototype]: dart.fieldType(dart.nullable(ui.Rect)),
    [__RenderEditable__caretPrototype_isSet]: dart.fieldType(core.bool),
    [_relativeOrigin]: dart.fieldType(ui.Offset),
    [_previousOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_resetOriginOnLeft]: dart.fieldType(core.bool),
    [_resetOriginOnRight]: dart.fieldType(core.bool),
    [_resetOriginOnTop]: dart.fieldType(core.bool),
    [_resetOriginOnBottom]: dart.fieldType(core.bool),
    [_resetFloatingCursorAnimationValue]: dart.fieldType(dart.nullable(core.double)),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  dart.defineLazy(editable.RenderEditable, {
    /*editable.RenderEditable._movementKeys*/get _movementKeys() {
      return T.LinkedHashSetOfLogicalKeyboardKey().from([keyboard_key.LogicalKeyboardKey.arrowRight, keyboard_key.LogicalKeyboardKey.arrowLeft, keyboard_key.LogicalKeyboardKey.arrowUp, keyboard_key.LogicalKeyboardKey.arrowDown]);
    },
    /*editable.RenderEditable._shortcutKeys*/get _shortcutKeys() {
      return T.LinkedHashSetOfLogicalKeyboardKey().from([keyboard_key.LogicalKeyboardKey.keyA, keyboard_key.LogicalKeyboardKey.keyC, keyboard_key.LogicalKeyboardKey.keyV, keyboard_key.LogicalKeyboardKey.keyX, keyboard_key.LogicalKeyboardKey.delete, keyboard_key.LogicalKeyboardKey.backspace]);
    },
    /*editable.RenderEditable._nonModifierKeys*/get _nonModifierKeys() {
      return (() => {
        let t53 = T.LinkedHashSetOfLogicalKeyboardKey().of(editable.RenderEditable._shortcutKeys);
        t53.addAll(editable.RenderEditable._movementKeys);
        return t53;
      })();
    },
    /*editable.RenderEditable._modifierKeys*/get _modifierKeys() {
      return T.LinkedHashSetOfLogicalKeyboardKey().from([keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.alt]);
    },
    /*editable.RenderEditable._macOsModifierKeys*/get _macOsModifierKeys() {
      return T.LinkedHashSetOfLogicalKeyboardKey().from([keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.alt]);
    },
    /*editable.RenderEditable._interestingKeys*/get _interestingKeys() {
      return (() => {
        let t54 = T.LinkedHashSetOfLogicalKeyboardKey().of(editable.RenderEditable._modifierKeys);
        t54.addAll(editable.RenderEditable._macOsModifierKeys);
        t54.addAll(editable.RenderEditable._nonModifierKeys);
        return t54;
      })();
    }
  }, false);
  editable._RenderEditableCustomPaint = class _RenderEditableCustomPaint extends box.RenderBox {
    get parent() {
      return T.RenderEditableN().as(super.parent);
    }
    get isRepaintBoundary() {
      return true;
    }
    get sizedByParent() {
      return true;
    }
    get painter() {
      return this[_painter];
    }
    set painter(newValue) {
      let t55, t55$, t55$0, t55$1;
      if (dart.equals(newValue, this.painter)) return;
      let oldPainter = this.painter;
      this[_painter] = newValue;
      if (dart.test((t55$ = (t55 = newValue, t55 == null ? null : t55.shouldRepaint(oldPainter)), t55$ == null ? true : t55$))) this.markNeedsPaint();
      if (dart.test(this.attached)) {
        t55$0 = oldPainter;
        t55$0 == null ? null : t55$0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t55$1 = newValue;
        t55$1 == null ? null : t55$1.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 3455, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 3455, 46, "offset");
      let parent = this.parent;
      if (!(parent != null)) dart.assertFailed(null, I[0], 3457, 12, "parent != null");
      let painter = this.painter;
      if (painter != null && parent != null) {
        painter.paint(context.canvas, this.size, parent);
      }
    }
    attach(owner) {
      let t55;
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 3465, 29, "owner");
      super.attach(owner);
      t55 = this[_painter];
      t55 == null ? null : t55.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t55;
      t55 = this[_painter];
      t55 == null ? null : t55.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 3477, 40, "constraints");
      return constraints.biggest;
    }
  };
  (editable._RenderEditableCustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    this[_painter] = painter;
    editable._RenderEditableCustomPaint.__proto__.new.call(this);
    ;
  }).prototype = editable._RenderEditableCustomPaint.prototype;
  dart.addTypeTests(editable._RenderEditableCustomPaint);
  dart.addTypeCaches(editable._RenderEditableCustomPaint);
  dart.setGetterSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getGetters(editable._RenderEditableCustomPaint.__proto__),
    parent: dart.nullable(editable.RenderEditable),
    painter: dart.nullable(editable.RenderEditablePainter)
  }));
  dart.setSetterSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getSetters(editable._RenderEditableCustomPaint.__proto__),
    painter: dart.nullable(editable.RenderEditablePainter)
  }));
  dart.setLibraryUri(editable._RenderEditableCustomPaint, I[1]);
  dart.setFieldSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getFields(editable._RenderEditableCustomPaint.__proto__),
    [_painter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter))
  }));
  editable.RenderEditablePainter = class RenderEditablePainter extends change_notifier.ChangeNotifier {};
  (editable.RenderEditablePainter.new = function() {
    editable.RenderEditablePainter.__proto__.new.call(this);
    ;
  }).prototype = editable.RenderEditablePainter.prototype;
  dart.addTypeTests(editable.RenderEditablePainter);
  dart.addTypeCaches(editable.RenderEditablePainter);
  dart.setLibraryUri(editable.RenderEditablePainter, I[1]);
  var _selectionHeightStyle = dart.privateName(editable, "_selectionHeightStyle");
  var _selectionWidthStyle = dart.privateName(editable, "_selectionWidthStyle");
  var _highlightedRange = dart.privateName(editable, "_highlightedRange");
  var _highlightColor = dart.privateName(editable, "_highlightColor");
  editable._TextHighlightPainter = class _TextHighlightPainter extends editable.RenderEditablePainter {
    get highlightColor() {
      return this[_highlightColor];
    }
    set highlightColor(newValue) {
      if (dart.equals(newValue, this[_highlightColor])) return;
      this[_highlightColor] = newValue;
      this.notifyListeners();
    }
    get highlightedRange() {
      return this[_highlightedRange];
    }
    set highlightedRange(newValue) {
      if (dart.equals(newValue, this[_highlightedRange])) return;
      this[_highlightedRange] = newValue;
      this.notifyListeners();
    }
    get selectionHeightStyle() {
      return this[_selectionHeightStyle];
    }
    set selectionHeightStyle(value) {
      if (value == null) dart.nullFailed(I[0], 3563, 46, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 3564, 12, "value != null");
      if (this[_selectionHeightStyle] == value) return;
      this[_selectionHeightStyle] = value;
      this.notifyListeners();
    }
    get selectionWidthStyle() {
      return this[_selectionWidthStyle];
    }
    set selectionWidthStyle(value) {
      if (value == null) dart.nullFailed(I[0], 3576, 44, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 3577, 12, "value != null");
      if (this[_selectionWidthStyle] == value) return;
      this[_selectionWidthStyle] = value;
      this.notifyListeners();
    }
    paint(canvas, size, renderEditable) {
      if (canvas == null) dart.nullFailed(I[0], 3585, 21, "canvas");
      if (size == null) dart.nullFailed(I[0], 3585, 34, "size");
      if (renderEditable == null) dart.nullFailed(I[0], 3585, 55, "renderEditable");
      let range = this.highlightedRange;
      let color = this.highlightColor;
      if (range == null || color == null || dart.test(range.isCollapsed)) {
        return;
      }
      this.highlightPaint.color = color;
      let boxes = renderEditable[_textPainter].getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: range.start, extentOffset: range.end}), {boxHeightStyle: this.selectionHeightStyle, boxWidthStyle: this.selectionWidthStyle});
      for (let box of boxes)
        canvas.drawRect(box.toRect().shift(renderEditable[_paintOffset]), this.highlightPaint);
    }
    shouldRepaint(oldDelegate) {
      if (oldDelegate === this) return false;
      if (oldDelegate == null) return this.highlightColor != null && this.highlightedRange != null;
      return !editable._TextHighlightPainter.is(oldDelegate) || !dart.equals(oldDelegate.highlightColor, this.highlightColor) || !dart.equals(oldDelegate.highlightedRange, this.highlightedRange) || oldDelegate.selectionHeightStyle != this.selectionHeightStyle || oldDelegate.selectionWidthStyle != this.selectionWidthStyle;
    }
  };
  (editable._TextHighlightPainter.new = function(opts) {
    let highlightedRange = opts && 'highlightedRange' in opts ? opts.highlightedRange : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    this.highlightPaint = ui.Paint.new();
    this[_selectionHeightStyle] = ui.BoxHeightStyle.tight;
    this[_selectionWidthStyle] = ui.BoxWidthStyle.tight;
    this[_highlightedRange] = highlightedRange;
    this[_highlightColor] = highlightColor;
    editable._TextHighlightPainter.__proto__.new.call(this);
    ;
  }).prototype = editable._TextHighlightPainter.prototype;
  dart.addTypeTests(editable._TextHighlightPainter);
  dart.addTypeCaches(editable._TextHighlightPainter);
  dart.setMethodSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getMethods(editable._TextHighlightPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setGetterSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getGetters(editable._TextHighlightPainter.__proto__),
    highlightColor: dart.nullable(ui.Color),
    highlightedRange: dart.nullable(ui.TextRange),
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle
  }));
  dart.setSetterSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getSetters(editable._TextHighlightPainter.__proto__),
    highlightColor: dart.nullable(ui.Color),
    highlightedRange: dart.nullable(ui.TextRange),
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle
  }));
  dart.setLibraryUri(editable._TextHighlightPainter, I[1]);
  dart.setFieldSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getFields(editable._TextHighlightPainter.__proto__),
    highlightPaint: dart.finalFieldType(ui.Paint),
    [_highlightColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_highlightedRange]: dart.fieldType(dart.nullable(ui.TextRange)),
    [_selectionHeightStyle]: dart.fieldType(ui.BoxHeightStyle),
    [_selectionWidthStyle]: dart.fieldType(ui.BoxWidthStyle)
  }));
  var _shouldPaint = dart.privateName(editable, "_shouldPaint");
  var ___FloatingCursorPainter_floatingCursorPaint = dart.privateName(editable, "_#_FloatingCursorPainter#floatingCursorPaint");
  var ___FloatingCursorPainter_floatingCursorPaint_isSet = dart.privateName(editable, "_#_FloatingCursorPainter#floatingCursorPaint#isSet");
  var _caretColor = dart.privateName(editable, "_caretColor");
  var _cursorRadius = dart.privateName(editable, "_cursorRadius");
  var _cursorOffset = dart.privateName(editable, "_cursorOffset");
  var _backgroundCursorColor = dart.privateName(editable, "_backgroundCursorColor");
  var _floatingCursorRect = dart.privateName(editable, "_floatingCursorRect");
  editable._FloatingCursorPainter = class _FloatingCursorPainter extends editable.RenderEditablePainter {
    get shouldPaint() {
      return this[_shouldPaint];
    }
    set shouldPaint(value) {
      if (value == null) dart.nullFailed(I[0], 3622, 24, "value");
      if (this.shouldPaint == value) return;
      this[_shouldPaint] = value;
      this.notifyListeners();
    }
    get floatingCursorPaint() {
      let t56;
      if (!dart.test(this[___FloatingCursorPainter_floatingCursorPaint_isSet])) {
        let t55 = ui.Paint.new();
        if (dart.test(this[___FloatingCursorPainter_floatingCursorPaint_isSet])) dart.throw(new _internal.LateError.fieldADI("floatingCursorPaint"));
        this[___FloatingCursorPainter_floatingCursorPaint] = t55;
        this[___FloatingCursorPainter_floatingCursorPaint_isSet] = true;
      }
      t56 = this[___FloatingCursorPainter_floatingCursorPaint];
      return t56;
    }
    get caretColor() {
      return this[_caretColor];
    }
    set caretColor(value) {
      let t56, t56$;
      if ((t56 = this.caretColor, t56 == null ? null : t56.value) == (t56$ = value, t56$ == null ? null : t56$.value)) return;
      this[_caretColor] = value;
      this.notifyListeners();
    }
    get cursorRadius() {
      return this[_cursorRadius];
    }
    set cursorRadius(value) {
      if (dart.equals(this[_cursorRadius], value)) return;
      this[_cursorRadius] = value;
      this.notifyListeners();
    }
    get cursorOffset() {
      return this[_cursorOffset];
    }
    set cursorOffset(value) {
      if (value == null) dart.nullFailed(I[0], 3657, 27, "value");
      if (dart.equals(this[_cursorOffset], value)) return;
      this[_cursorOffset] = value;
      this.notifyListeners();
    }
    get backgroundCursorColor() {
      return this[_backgroundCursorColor];
    }
    set backgroundCursorColor(value) {
      let t56, t56$;
      if ((t56 = this.backgroundCursorColor, t56 == null ? null : t56.value) == (t56$ = value, t56$ == null ? null : t56$.value)) return;
      this[_backgroundCursorColor] = value;
      if (dart.test(this.showRegularCaret)) this.notifyListeners();
    }
    get floatingCursorRect() {
      return this[_floatingCursorRect];
    }
    set floatingCursorRect(value) {
      if (dart.equals(this[_floatingCursorRect], value)) return;
      this[_floatingCursorRect] = value;
      this.notifyListeners();
    }
    paintRegularCursor(canvas, renderEditable, caretColor, textPosition) {
      let t56;
      if (canvas == null) dart.nullFailed(I[0], 3684, 34, "canvas");
      if (renderEditable == null) dart.nullFailed(I[0], 3684, 57, "renderEditable");
      if (caretColor == null) dart.nullFailed(I[0], 3684, 79, "caretColor");
      if (textPosition == null) dart.nullFailed(I[0], 3684, 104, "textPosition");
      let caretPrototype = renderEditable[_caretPrototype];
      let caretOffset = renderEditable[_textPainter].getOffsetForCaret(textPosition, caretPrototype);
      let caretRect = caretPrototype.shift(caretOffset['+'](this.cursorOffset));
      let caretHeight = renderEditable[_textPainter].getFullHeightForCaret(textPosition, caretPrototype);
      if (caretHeight != null) {
        switch (platform.defaultTargetPlatform) {
          case C[13] || CT.C13:
          case C[16] || CT.C16:
          {
            let heightDiff = dart.notNull(caretHeight) - dart.notNull(caretRect.height);
            caretRect = new ui.Rect.fromLTWH(caretRect.left, dart.notNull(caretRect.top) + heightDiff / 2, caretRect.width, caretRect.height);
            break;
          }
          case C[14] || CT.C14:
          case C[15] || CT.C15:
          case C[17] || CT.C17:
          case C[18] || CT.C18:
          {
            caretRect = new ui.Rect.fromLTWH(caretRect.left, dart.notNull(caretRect.top) - 2, caretRect.width, caretHeight);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      caretRect = caretRect.shift(renderEditable[_paintOffset]);
      let integralRect = caretRect.shift(renderEditable[_snapToPhysicalPixel](caretRect.topLeft));
      if (dart.test(this.shouldPaint)) {
        let radius = this.cursorRadius;
        this.caretPaint.color = caretColor;
        if (radius == null) {
          canvas.drawRect(integralRect, this.caretPaint);
        } else {
          let caretRRect = new ui.RRect.fromRectAndRadius(integralRect, radius);
          canvas.drawRRect(caretRRect, this.caretPaint);
        }
      }
      t56 = integralRect;
      this.caretPaintCallback(t56);
    }
    paint(canvas, size, renderEditable) {
      let t56, t56$;
      if (canvas == null) dart.nullFailed(I[0], 3737, 21, "canvas");
      if (size == null) dart.nullFailed(I[0], 3737, 34, "size");
      if (renderEditable == null) dart.nullFailed(I[0], 3737, 55, "renderEditable");
      if (!(renderEditable != null)) dart.assertFailed(null, I[0], 3740, 12, "renderEditable != null");
      let selection = renderEditable.selection;
      if (selection == null || !dart.test(selection.isCollapsed)) return;
      let floatingCursorRect = this.floatingCursorRect;
      let caretColor = floatingCursorRect == null ? this.caretColor : dart.test(this.showRegularCaret) ? this.backgroundCursorColor : null;
      let caretTextPosition = floatingCursorRect == null ? selection.extent : renderEditable[_floatingCursorTextPosition];
      if (caretColor != null) {
        this.paintRegularCursor(canvas, renderEditable, caretColor, caretTextPosition);
      }
      let floatingCursorColor = (t56 = this.caretColor, t56 == null ? null : t56.withOpacity(0.75));
      if (floatingCursorRect == null || floatingCursorColor == null || !dart.test(this.shouldPaint)) return;
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(floatingCursorRect.shift(renderEditable[_paintOffset]), editable._kFloatingCaretRadius), (t56$ = this.floatingCursorPaint, (() => {
        t56$.color = floatingCursorColor;
        return t56$;
      })()));
    }
    shouldRepaint(oldDelegate) {
      if (this === oldDelegate) return false;
      if (oldDelegate == null) return this.shouldPaint;
      return !editable._FloatingCursorPainter.is(oldDelegate) || oldDelegate.shouldPaint != this.shouldPaint || oldDelegate.showRegularCaret != this.showRegularCaret || !dart.equals(oldDelegate.caretColor, this.caretColor) || !dart.equals(oldDelegate.cursorRadius, this.cursorRadius) || !dart.equals(oldDelegate.cursorOffset, this.cursorOffset) || !dart.equals(oldDelegate.backgroundCursorColor, this.backgroundCursorColor) || !dart.equals(oldDelegate.floatingCursorRect, this.floatingCursorRect);
    }
  };
  (editable._FloatingCursorPainter.new = function(caretPaintCallback) {
    if (caretPaintCallback == null) dart.nullFailed(I[0], 3618, 31, "caretPaintCallback");
    this[_shouldPaint] = true;
    this.showRegularCaret = false;
    this.caretPaint = ui.Paint.new();
    this[___FloatingCursorPainter_floatingCursorPaint] = null;
    this[___FloatingCursorPainter_floatingCursorPaint_isSet] = false;
    this[_caretColor] = null;
    this[_cursorRadius] = null;
    this[_cursorOffset] = ui.Offset.zero;
    this[_backgroundCursorColor] = null;
    this[_floatingCursorRect] = null;
    this.caretPaintCallback = caretPaintCallback;
    editable._FloatingCursorPainter.__proto__.new.call(this);
    ;
  }).prototype = editable._FloatingCursorPainter.prototype;
  dart.addTypeTests(editable._FloatingCursorPainter);
  dart.addTypeCaches(editable._FloatingCursorPainter);
  dart.setMethodSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getMethods(editable._FloatingCursorPainter.__proto__),
    paintRegularCursor: dart.fnType(dart.void, [ui.Canvas, editable.RenderEditable, ui.Color, ui.TextPosition]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setGetterSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getGetters(editable._FloatingCursorPainter.__proto__),
    shouldPaint: core.bool,
    floatingCursorPaint: ui.Paint,
    caretColor: dart.nullable(ui.Color),
    cursorRadius: dart.nullable(ui.Radius),
    cursorOffset: ui.Offset,
    backgroundCursorColor: dart.nullable(ui.Color),
    floatingCursorRect: dart.nullable(ui.Rect)
  }));
  dart.setSetterSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getSetters(editable._FloatingCursorPainter.__proto__),
    shouldPaint: core.bool,
    caretColor: dart.nullable(ui.Color),
    cursorRadius: dart.nullable(ui.Radius),
    cursorOffset: ui.Offset,
    backgroundCursorColor: dart.nullable(ui.Color),
    floatingCursorRect: dart.nullable(ui.Rect)
  }));
  dart.setLibraryUri(editable._FloatingCursorPainter, I[1]);
  dart.setFieldSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getFields(editable._FloatingCursorPainter.__proto__),
    [_shouldPaint]: dart.fieldType(core.bool),
    caretPaintCallback: dart.fieldType(dart.fnType(dart.void, [ui.Rect])),
    showRegularCaret: dart.fieldType(core.bool),
    caretPaint: dart.finalFieldType(ui.Paint),
    [___FloatingCursorPainter_floatingCursorPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [___FloatingCursorPainter_floatingCursorPaint_isSet]: dart.fieldType(core.bool),
    [_caretColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_cursorRadius]: dart.fieldType(dart.nullable(ui.Radius)),
    [_cursorOffset]: dart.fieldType(ui.Offset),
    [_backgroundCursorColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_floatingCursorRect]: dart.fieldType(dart.nullable(ui.Rect))
  }));
  editable._CompositeRenderEditablePainter = class _CompositeRenderEditablePainter extends editable.RenderEditablePainter {
    addListener(listener) {
      if (listener == null) dart.nullFailed(I[0], 3796, 33, "listener");
      for (let painter of this.painters)
        painter.addListener(listener);
    }
    removeListener(listener) {
      if (listener == null) dart.nullFailed(I[0], 3802, 36, "listener");
      for (let painter of this.painters)
        painter.removeListener(listener);
    }
    paint(canvas, size, renderEditable) {
      if (canvas == null) dart.nullFailed(I[0], 3808, 21, "canvas");
      if (size == null) dart.nullFailed(I[0], 3808, 34, "size");
      if (renderEditable == null) dart.nullFailed(I[0], 3808, 55, "renderEditable");
      for (let painter of this.painters)
        painter.paint(canvas, size, renderEditable);
    }
    shouldRepaint(oldDelegate) {
      if (oldDelegate === this) return false;
      if (!editable._CompositeRenderEditablePainter.is(oldDelegate) || oldDelegate.painters[$length] != this.painters[$length]) return true;
      let oldPainters = oldDelegate.painters[$iterator];
      let newPainters = this.painters[$iterator];
      while (dart.test(oldPainters.moveNext()) && dart.test(newPainters.moveNext()))
        if (dart.test(newPainters.current.shouldRepaint(oldPainters.current))) return true;
      return false;
    }
  };
  (editable._CompositeRenderEditablePainter.new = function(opts) {
    let painters = opts && 'painters' in opts ? opts.painters : null;
    if (painters == null) dart.nullFailed(I[0], 3791, 51, "painters");
    this.painters = painters;
    editable._CompositeRenderEditablePainter.__proto__.new.call(this);
    ;
  }).prototype = editable._CompositeRenderEditablePainter.prototype;
  dart.addTypeTests(editable._CompositeRenderEditablePainter);
  dart.addTypeCaches(editable._CompositeRenderEditablePainter);
  dart.setMethodSignature(editable._CompositeRenderEditablePainter, () => ({
    __proto__: dart.getMethods(editable._CompositeRenderEditablePainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setLibraryUri(editable._CompositeRenderEditablePainter, I[1]);
  dart.setFieldSignature(editable._CompositeRenderEditablePainter, () => ({
    __proto__: dart.getFields(editable._CompositeRenderEditablePainter.__proto__),
    painters: dart.finalFieldType(core.List$(editable.RenderEditablePainter))
  }));
  editable._isWhitespace = function _isWhitespace(codeUnit) {
    if (codeUnit == null) dart.nullFailed(I[0], 84, 24, "codeUnit");
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      {
        break;
      }
      default:
      {
        return false;
      }
    }
    return true;
  };
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  dart.defineLazy(editable, {
    /*editable._kCaretGap*/get _kCaretGap() {
      return 1;
    },
    /*editable._kCaretHeightOffset*/get _kCaretHeightOffset() {
      return 2;
    },
    /*editable._kFloatingCaretSizeIncrease*/get _kFloatingCaretSizeIncrease() {
      return C[19] || CT.C19;
    },
    /*editable._kFloatingCaretRadius*/get _kFloatingCaretRadius() {
      return C[20] || CT.C20;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/rendering/editable.dart", {
    "package:flutter/src/rendering/editable.dart": editable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["editable.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/rendering/editable.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__editable: editable
  };
}));

//# sourceMappingURL=editable.dart.lib.js.map
